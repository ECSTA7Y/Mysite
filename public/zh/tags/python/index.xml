<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on   </title>
    <link>/zh/tags/python/</link>
    <description>Recent content in Python on   </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 11 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/zh/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python面向对象基础</title>
      <link>/zh/pyobject/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/pyobject/</guid>
      <description>class Dog: def bark(self): print(&amp;quot;woo woo woo&amp;quot;)  dog1=Dog() dog1.bark()  woo woo woo  class Dog: def bark(self,xm): self.name = xm print(&amp;quot;woo woo woo, I am &amp;quot;+self.name) dog1=Dog() dog1.bark(&amp;quot;Lulu&amp;quot;)  woo woo woo, I am Lulu  ##__init__()方法 class Dog: def __init__(self,name,color): self.name = name self.color = color def bark(self): print(&amp;quot;woo,woo,woo,我是&amp;quot;+ self.name +&amp;quot;!&amp;quot;) dog1 = Dog(&amp;quot;阿黄&amp;quot;,&amp;quot;黄色&amp;quot;) dog1.bark() #print(&amp;quot;刚才创建了一个狗对象，名叫：&amp;quot;+dog1.name+&amp;quot;!&amp;quot;) #bark()  woo,woo,woo,我是阿黄!  dog1 = Dog(&amp;quot;阿黄&amp;quot;,&amp;quot;黄色&amp;quot;)  class Dog: number = 0 def __init__(self,name): self.</description>
    </item>
    
    <item>
      <title>排序和查找算法(Python实现)</title>
      <link>/zh/%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95python%E5%AE%9E%E7%8E%B0/</guid>
      <description>排序算法 冒泡排序法 def bubble(List): for j in range(len(List)-1,0,-1): print(List) for i in range(0,j): if List[i]&amp;gt;List[i+1]: List[i],List[i+1] = List[i+1],List[i] return List testlist = [49,38,65,97,76,13,27,49] print(&#39;结果：&#39;,bubble(testlist))  [49, 38, 65, 97, 76, 13, 27, 49] [38, 49, 65, 76, 13, 27, 49, 97] [38, 49, 65, 13, 27, 49, 76, 97] [38, 49, 13, 27, 49, 65, 76, 97] [38, 13, 27, 49, 49, 65, 76, 97] [13, 27, 38, 49, 49, 65, 76, 97] [13, 27, 38, 49, 49, 65, 76, 97] 结果： [13, 27, 38, 49, 49, 65, 76, 97]  选择排序算法 #选择排序算法：程序填空 def selection_sort(L): N = len(L) #提取列表长度N exchange_count = 0 for i in range(0, N-1): #从0开始循环 min_index = i #排序序列的末尾位置 for j in range(i+1,N): #嵌套循环 if L[min_index] &amp;gt; L[j]: #第一次循环L[0]&amp;gt;L[1] min_index = j #第一次循环min_index=1 j是二者最小值的列表索引。 #min_index永远等于最小值索引 #以下是移动程序 if min_index!</description>
    </item>
    
    <item>
      <title>Python函数与模块的使用</title>
      <link>/zh/pydef/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/pydef/</guid>
      <description>def star(m,n): for i in range(m): print(&#39;*&#39;*n) star(3,2)  ** ** **  star(5,6)  ****** ****** ****** ****** ******  star(4,20)  ******************** ******************** ******************** ********************  def paint(m,s): print(s*m) paint(3,&#39;*&#39;)  ***  paint(8,&#39;%+&#39;)  %+%+%+%+%+%+%+%+  def check(a): if a&amp;gt;0: print(&#39;&amp;gt;0&#39;) elif a &amp;lt; 0: print(&#39;&amp;lt;0&#39;) else: print(&amp;quot;==0&amp;quot;) check(5)  &amp;gt;0  check(-2)  &amp;lt;0  check(0)  ==0  def avg(a,b): return(a+b)/2 c = avg(4,6) c  5.</description>
    </item>
    
  </channel>
</rss>
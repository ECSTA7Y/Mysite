library(shiny)
runGitHub( "txtnb_en", "ECSTA7Y")
knitr::opts_chunk$set(comment=NA,error=T,message = F,warning = F,fig.align='center',out.width ='90%')
library(magrittr)
library(quanteda)
library(tidytext)
library(ggplot2)
library(dplyr)
library(tm)
library(readr)
library(stringr)
sms <- read_csv("E:/MaLearning/SPAM text message 20170820 - Data.csv")
sms %>% count(Category)
#sms %$% prop.table(table(Category))[1]
smswd <- sms %>%
rename(message = Message,tag=Category) %>%
mutate(ID = row_number())
head(smswd)
Y <- as.factor(smswd$tag)
smswd$message <- lapply(smswd$message , iconv, "UTF-8", "ASCII", sub="")
smsvis <- smswd %>%
unnest_tokens(word,message) %>%
filter(!str_detect(word, "^[0-9]*$")) %>%
anti_join(stop_words) %>%
mutate(word = SnowballC::wordStem(word,language = "english"))
head(smsvis)
library(reshape2)
library(wordcloud)
smsvis %>%
count(word, tag, sort = T) %>%
acast(word ~ tag, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("blue", "red"),max.words = 50)
smsvis %>%
count(tag, word) %>%
group_by(tag) %>%
top_n(15) %>%
ggplot() +
geom_col(aes(reorder(word, n),
n, fill = tag),
show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
smsvis %>%
count(tag, word) %>%
bind_tf_idf(word,tag,n) %>%
group_by(tag) %>%
top_n(10) %>%
ggplot() +
geom_col(aes(reorder(word,tf_idf),
tf_idf, fill = tag),
show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
ms_corpus <- VCorpus(VectorSource(smswd$message))
sms_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
dim(sms_dtm) #5572
sms_dtm1 <- removeSparseTerms(sms_dtm, sparse = .98)
smsmat <- as.matrix(sms_dtm1)
#head(smsmat)
dim(smsmat)
çš„
View(smsmat)
colname(smsmat)
colnames(smsmat)
for i in colnames(smsmat):
for (i in colnames(smsmat)){
print(i)
}
convert_dtm <- function(string){
ms_corpus <- VCorpus(VectorSource(string))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
return(test_dtmx)
}
convert_dtm(new)
newdt = convert_dtm(new)
newdt
View(newdt)
newdt = convert_dtm(new2)
new <- 'please go home at 4 o clock bro'
new2 <- 'We are trying to contact you.Please call our customer service representative on FREEPHONE.Claim code S89. Valid 12hrs only'
newdt = convert_dtm(new2)
newdt
View(newdt)
new <- 'please go home at 4 o clock bro'
newdt = convert_dtm(new)
newdt
View(newdt)
test_dtmx <- function(string){ #
`%>%` = magrittr::`%>%`
test_dtm <- VCorpus(VectorSource(string)) %>%
DocumentTermMatrix(., control = list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T)) %>%
as.matrix()
return(test_dtm)
}
newdt = convert_dtm(new)
newdt
new = 'please go home at 4 o clock motherfucker'
newdt = convert_dtm(new)
newdt
colnames(newdt)
colnames(smsmat)
for (i in colnames(newdt)){
i %in% colnames(smsmat)
}
for (i in colnames(newdt)){
if(i %in% colnames(smsmat)){
print(i)
}
}
for (i in colnames(newdt)){
if(i %in% colnames(smsmat)){
print('yes')
}
}
new = 'We are trying to contact you.Please call our customer service representative on FREEPHONE.Claim code S89. Valid 12hrs only'
newdt = convert_dtm(new)
newdt
colnames(newdt)
colnames(smsmat)
for (i in colnames(newdt)){
if(i %in% colnames(smsmat)){
print(i)
}
}
for (i in colnames(newdt)){
if(i %in% colnames(smsmat)){
print(i)
}
}
?apply
decide_in = function(x){
if(x %in% colnames(smsmat)){
return(x)
}
}
lapply(colnames(newdt),decide_in)
sapply(colnames(newdt),decide_in)
lapply(colnames(newdt),decide_in)
sapply(colnames(newdt),decide_in)
for (i in colnames(newdt)){
if(i %in% colnames(smsmat)){
print(i)
}
}
sapply(colnames(newdt),decide_in)
s = sapply(colnames(newdt),decide_in)
class(s)
as.vector(s)
s = as.vector(s)
class(s)
s = as.vector(s)
s
as.data.frame(s)
s = sapply(colnames(newdt),decide_in)
s = as.data.frame(s)
s = sapply(colnames(newdt),decide_in)
View(s)
s[["call"]]
s = vapply(colnames(newdt),decide_in)
dim(colnames(smsmat))
colnames(smsmat)
s = vapply(colnames(newdt),decide_in,seq(51))
seq(51)
s = vapply(colnames(newdt),decide_in,seq(5))
s = vapply(colnames(newdt),decide_in,seq(1))
s = apply(colnames(newdt),decide_in)
s = apply(colnames(newdt),1,decide_in)
s = apply(colnames(newdt),2,decide_in)
s = sapply(colnames(newdt),decide_in)
sapply(s,print)
colnames(newdt)
list1 = c()
decide_in = function(x){
if(x %in% colnames(smsmat)){
list1 = c(list1,x)
}
}
s = sapply(colnames(newdt),decide_in)
s
list1 = c()
decide_in = function(x){
if(x %in% colnames(smsmat)){
list1 = c(list1,x)
}
}
sapply(colnames(newdt),decide_in)
list1
list1 = c()
class(list1)
new = smsmat[1,:]
new = smsmat[1,: ]
new = smsmat[1]
new
new = smsmat[1,]
new
new = smsmat[1,] = 0
new
smsmat[1,] = 0
smsmat
new = smsmat[1,]
new[1,] = 0
new
new = smsmat[1,]
new = smsmat[2,]
new
new = smsmat[9,]
new
new
View(smsmat)
new = smsmat[3,]
new
new[1,]
new
dim(new)
new
class(new)
new = as.data.frame(new)
new
new = smsmat[3,]
new = as.matrix(new)
new
t(new)
new[1,]
new = t(new)
new[1,]
new[1,] = 0
new[1,]
new$back = 1
new$back
new
new
new = smsmat[3,]
new = as.matrix(new)
new = t(new)
new[1,] = 0
new
decide_in = function(x){
if(x %in% colnames(new)){
new = new %>% mutate(x=1)
}
}
sapply(colnames(newdt),decide_in)
new = smsmat[3,]
new = as.data.frame(new)
new = t(new)
new = smsmat[3,]
new = as.data.frame(new)
new = t(new)
new[1,] = 0
#new[1,]
decide_in = function(x){
if(x %in% colnames(new)){
new = new %>% mutate(x=1)
}
}
sapply(colnames(newdt),decide_in)
new = smsmat[3,]
new = as.data.frame(new)
new = t(new)
new[1,] = 0
decide_in(call)
decide_in(`call`)
decide_in('call')
colnames(newdt)
colnames(new)
colnames(newdt) %in% colnames(new)
colnames(new) %in% colnames(newdt)

bind_tf_idf(word,ID,n) %>%
right_join(smswd[,1:2])
smswd <- sms %>%
rename(message = Message,tag=Category) %>%
mutate(ID = row_number())
head(smswd)
smswd <- sms %>%
rename(message = Message,tag=Category) %>%
mutate(ID = row_number())
head(smswd)
library(magrittr)
library(quanteda)
library(tidytext)
library(ggplot2)
library(dplyr)
library(tm)
library(readr)
library(stringr)
sms <- read_csv("E:/MaLearning/SPAM text message 20170820 - Data.csv")
sms %>% count(Category)
smswd <- sms %>%
rename(message = Message,tag=Category) %>%
mutate(ID = row_number())
head(smswd)
sms
smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n)
idtag <- smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n) %>%
left_join(idtag,copy = T)
idtag <- smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n) %>%
left_join(idtag,copy = T) %>% #
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(tag) %>%
top_n(15) %>%
ungroup() %>%
ggplot() +
geom_col(aes(reorder(word,tf_idf),
tf_idf, fill = tag),show.legend = F) +
facet_wrap(~tag) +
coord_flip()
idtag <- smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n)
idtag
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n) %>%
left_join(idtag,copy = T)
idtag <- smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n) %>%
left_join(idtag,copy = T) %>%
group_by(tag)
idtag <- smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n) %>%
left_join(idtag,copy = T) %>%
group_by(tag) %>%
top_n(15) %>%
ungroup()
idtag <- smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n) %>%
left_join(idtag,copy = T) %>%
group_by(tag) %>%
mutate(word=reorder(word,tf_idf)) %>%
top_n(15) %>%
ungroup() %>%
ggplot() +
geom_col(aes(reorder(word,tf_idf),
tf_idf, fill = tag),show.legend = F) +
facet_wrap(~tag) +
coord_flip()
idtag <- smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n) %>%
left_join(idtag,copy = T) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(tag) %>%
mutate(word=reorder(word,tf_idf)) %>%
top_n(15) %>%
ungroup() %>%
ggplot() +
geom_col(aes(reorder(word,tf_idf),
tf_idf, fill = tag),show.legend = F) +
facet_wrap(~tag) +
coord_flip()
idtag <- smswd %>% select(ID,tag)
smsvis %>%
count(ID, word) %>%
bind_tf_idf(word,ID,n) %>%
left_join(idtag,copy = T) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(tag) %>%
top_n(15) %>%
ggplot() +
geom_col(aes(reorder(word,tf_idf),
tf_idf, fill = tag),show.legend = F) +
facet_wrap(~tag) +
coord_flip()
smsvis
smsvis %>%
count(tag, word) %>%
group_by(tag) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = tag)) +
geom_col(show.legend = F) +
facet_wrap(~sentiment, scales = "free_y") +
coord_flip()
smsvis %>%
count(tag, word) %>%
group_by(tag) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = tag)) +
geom_col(show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
smsvis %>%
count(tag, word) %>%
bind_tf_idf(word,tag,n) %>%
group_by(tag) %>%
top_n(15) %>%
ggplot() +
geom_col(aes(reorder(word,tf_idf),
tf_idf, fill = tag),show.legend = F) +
facet_wrap(~tag) +
coord_flip()
smsvis %>%
count(tag, word) %>%
bind_tf_idf(word,tag,n) %>%
group_by(tag) %>%
top_n(15) %>%
ggplot() +
geom_col(aes(reorder(word,tf_idf),
tf_idf, fill = tag),show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
smsvis %>%
count(tag, word) %>%
group_by(tag) %>%
top_n(10) %>%
ungroup() %>%
ggplot() +
geom_col(aes(reorder(word, n), n, fill = tag),
show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
smsvis %>%
count(tag, word) %>%
group_by(tag) %>%
top_n(15) %>%
ungroup() %>%
ggplot() +
geom_col(aes(reorder(word, n), n, fill = tag),
show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
smsvis %>%
count(tag, word) %>%
group_by(tag) %>%
top_n(15) %>%
ggplot() +
geom_col(aes(reorder(word, n), n, fill = tag),
show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
?count
sms %$% table(Category)
sms %$% prop.table(table(Category))
sms %>% count(Category)
sms %$% prop.table(table(Category))
sms %$% prop.table(table(Category))[1]
sms %$% prop.table(table(Category))[1]
ms_corpus <- VCorpus(VectorSource(smswd$message))
sms_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
dim(sms_dtm) #5572
sms_dtm1 <- removeSparseTerms(sms_dtm, sparse = .98)
smsmat <- as.matrix(sms_dtm1)
#head(smsmat)
dim(smsmat)
library(caret)
library(e1071)
svmc <- svm(smsmat, Y)
print(svmc)
summary(svmc)
pred <- predict(svmc,smsmat)
conMatrix <- confusionMatrix(pred,Y)
conMatrix[["table"]]
nb <- naiveBayes(smsmat, Y)
#print(nb)
summary(nb)
pred1 <- predict(nb,smsmat)
conMatrix1 <- confusionMatrix(pred1,Y)
#混淆矩阵
conMatrix1[["table"]]
prop.table(conMatrix1[["table"]],1)
confusionMatrix(pred,Y)
?confusionMatrix
## 2 class example
lvs <- c("normal", "abnormal")
truth <- factor(rep(lvs, times = c(86, 258)),
levels = rev(lvs))
pred <- factor(
c(
rep(lvs, times = c(54, 32)),
rep(lvs, times = c(27, 231))),
levels = rev(lvs))
xtab <- table(pred, truth)
confusionMatrix(xtab)
confusionMatrix(pred, truth)
confusionMatrix(pred, truth,mode="prec_recall")
library(caret)
library(e1071)
svmc <- svm(smsmat, Y)
print(svmc)
summary(svmc)
pred <- predict(svmc,smsmat)
confusionMatrix(pred,Y)
conMatrix <- confusionMatrix(pred,Y,positive ='spam',mode="prec_recall")
conMatrix[["table"]]
nb <- naiveBayes(smsmat, Y)
#print(nb)
summary(nb)
pred1 <- predict(nb,smsmat)
conMatrix1 <- confusionMatrix(pred1,Y,positive ='spam',mode="prec_recall")
#混淆矩阵
conMatrix1[["table"]]
prop.table(conMatrix1[["table"]],1)
View(conMatrix)
conMatrix[["byClass"]][["Recall"]]
conMatrix[["byClass"]][["Precision"]]
new <- 'Even my brother is not like to speak with me. They treat me like aids patent.
'
ms_corpus <- VCorpus(VectorSource(new))
ms_corpus
sms_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
dim(sms_dtm) #5572
sms_dtm1 <- removeSparseTerms(sms_dtm, sparse = .98)
smsmat <- as.matrix(sms_dtm1)
new <- 'Even my brother is not like to speak with me. They treat me like aids patent.
'
ms_corpus <- VCorpus(VectorSource(new))
sms_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
dim(sms_dtm) #5572
smsmat <- as.matrix(sms_dtm1)
smsmat
pred1 <- predict(nb,smsmat)
pred1
new <- 'Thanks for your subscription to Ringtone UK your mobile will be charged 拢5/month Please confirm by replying YES or NO. If you reply NO you will not be charged'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
result <- predict(svmc,test_dtmx)
test_dtmx
result <- predict(svmc,test_dtmx)
result <- predict(nb,test_dtmx)
result
test_dtmx
test_dtmx
new <- 'please fucking go home bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
result <- predict(svmc,test_dtmx)
result <- predict(nb,test_dtmx)
result
test_dtmx <- as.matrix(test_dtm)
result <- predict(svmc,test_dtmx)
new <- 'I\'m home.'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
result <- predict(svmc,test_dtmx)
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'CONTEST! Win A StarWars Bundle XBox One From Pornfidelity.com!- Subscribe, Like & Comment #BestCreampies On This Jessa Blue Scene To Enter!'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'A premium video is free now! Go and see it!'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'We are trying to contact you.Please call our customer service representative on FREEPHONE. You have a New Years delivery waiting for you. Call 09061701939. Claim code S89. Valid 12hrs only'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'We are trying to contact you.Please call our customer service representative on FREEPHONE.Claim code S89. Valid 12hrs only'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'We are trying to contact you.Please call our customer service representative on FREEPHONE.Claim code S89. Valid 12hrs only'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
#specify the packages of interest
packages = c("gtrendsR","tidyverse","usmap")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
thanksgiving <- gtrends("thanksgiving",geo = "US", time = "now 1-d")
library(rpart)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
par(mar = rep(1, 4), xpd = TRUE)
plot(fit, branch = 0.7)
text(fit, use.n = TRUE, digits = 7)
summary(fit)
fit
help(package = 'purrr')
library(purrr)
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
library(reticulate)
help(package = "reticulate")
repl_python
r-py-conversion	Convert between Python and R objects
repl_python
py
repl_python
repl_python()
def sum(x,y):
return x+y
p = lambda x,y:x+y
print(p(4,6))
a=lambda x:x*x
print(a(3))
exit
reticulate::repl_python()
a = lambda x,y,z:(x+8)*y-z
print(a(5,6,8))
a=lambda x:x*x
print(a)
print(a(3))
exit
27*4
repl_python()
person("Kevin", "Ushey", role = c("aut", "cre"),
email = "kevin@rstudio.com")
reticulate::repl_python()
exit
blogdown:::serve_site()
blogdown:::insert_image_addin()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
install.packages('rvest')
?rvest
help(package = rvest)

aes(x),fill='purple',
alpha=1/5)+
geom_density(data=as.data.frame(x2),
aes(x2),fill='green',
alpha=1/5)
ggplot(x2,aes(x2)) +
geom_density(data=as.data.frame(x),
aes(x),fill='purple',
col='purple',alpha=1/5)+
geom_density(data=as.data.frame(x2),
aes(x2),fill='green',
col='green',alpha=1/5)
ggplot(x2,aes(x2)) +
geom_density(data=as.data.frame(x),
aes(x),fill='purple',
col='purple',alpha=1/5)+
geom_density(data=as.data.frame(x2),
aes(x2),fill='green',
col='green',alpha=1/5)+
labs(x='')
library(glmnet)
?glmnet
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
fit1=glmnet(x,y)
print(fit1)
coef(fit1,s=0.01) # extract coefficients at a single value of lambda
predict(fit1,newx=x[1:10,],s=c(0.01,0.005)) # make predictions
#multivariate gaussian
y=matrix(rnorm(100*3),100,3)
fit1m=glmnet(x,y,family="mgaussian")
plot(fit1m,type.coef="2norm")
plot(fit1m,type.coef="lambda")
plot(fit1m,type.coef="coef")
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
g2=sample(1:2,100,replace=TRUE)
g4=sample(1:4,100,replace=TRUE)
fit1=glmnet(x,y)
plot(fit1)
plot(fit1,xvar="lambda",label=TRUE)
plot(fit1m,xvar="lambda",label=TRUE)
y=matrix(rnorm(100*3),100,3)
y
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
y
x
library(glmnet)
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
fit1=glmnet(x,y)
plot(fit1,xvar="lambda",label=TRUE)
library(glmnet)
x=matrix(rnorm(100*20),100,20)
y=rnorm(100)
fit1=glmnet(x,y)
plot(fit1,xvar="lambda",label=T)
lasso.coef <- predict(fit1,type='coefficients')[1:55 ,]
fit1
lasso.coef <- predict(fit1,type='coefficients',s=0.0656100)
lasso.coef
coeffin <- lasso.coef %>%
as.data.frame() %>%
rename('lasso.coef'='.') %>%
mutate(name=rownames(.)) %>%
filter(lasso.coef<20)
library(magrittr)
coeffin <- lasso.coef %>%
as.data.frame() %>%
rename('lasso.coef'='.') %>%
mutate(name=rownames(.)) %>%
filter(lasso.coef<20)
coeffin <- lasso.coef %>% as.data.frame()
lasso.coef
lasso.coef <- predict(fit1,type='coefficients',s=0.0656100)[1:20 ,]
lasso.coef
coeffin <- lasso.coef %>%
as.data.frame() %>%
rename('lasso.coef'='.') %>%
mutate(name=rownames(.)) %>%
filter(lasso.coef<20)
library(dplyr)
coeffin <- lasso.coef %>%
as.data.frame() %>%
rename('lasso.coef'='.') %>%
mutate(name=rownames(.)) %>%
filter(lasso.coef<20)
coeffin
ggplot(coeffin,aes(reorder(name,lasso.coef),
lasso.coef)) +
geom_point(size=1.5, color='red')+
coord_flip()+
labs(x='变量',y='LASSO回归系数') +
theme_bw()
library(ggplot2)
ggplot(coeffin,aes(reorder(name,lasso.coef),
lasso.coef)) +
geom_point(size=1.5, color='red')+
coord_flip()+
labs(x='变量',y='LASSO回归系数') +
theme_bw()
library(glmnet)
library(dplyr)
library(magrittr)
library(ggplot2)
x <- matrix(rnorm(100*20),100,20) # 自变量矩阵
y <- rnorm(100) #因变量矩阵
fit1 <- glmnet(x,y) # LASSO拟合
plot(fit1,xvar="lambda",label=T) # 回归系数随惩罚项收缩图
lasso.coef <- predict(fit1,type='coefficients',s=0.0656100)[1:20 ,] #提取特定lambda值的模型系数
coeffin <- lasso.coef %>%  # 整理数据
as.data.frame() %>%
rename('lasso.coef'='.') %>%
mutate(name=rownames(.)) %>%
filter(lasso.coef<20)
ggplot(coeffin,aes(reorder(name,lasso.coef), # 画出每个变量的系数
lasso.coef)) +
geom_point(size=1.5, color='red')+
coord_flip()+
labs(x='变量',y='LASSO回归系数') +
theme_bw()
library(xgboost)
?xgboost
ceps <- read_csv("C:/Users/xsong/Desktop/table/cepsNA.csv")
library(haven)
library(ggplot2)
library(dplyr)
library(tidyr)
library(mice)
library(readr)
library(cowplot)
`%>%` <- magrittr::`%>%`
ceps <- read_csv("C:/Users/xsong/Desktop/table/cepsNA.csv")
missing.values <- ceps %>%
gather(key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
group_by(key) %>%
mutate(total = n()) %>%
group_by(key, total, isna) %>%
summarise(num.isna = n()) %>%
mutate(pct = num.isna / total * 100)
ceps <- read_csv("C:/Users/xsong/Desktop/table/cepsNA.csv")
missing <- ceps %>%
gather(key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
group_by(key) %>%
mutate(total = n()) %>%
group_by(key, total, isna) %>%
summarise(num.isna = n()) %>%
mutate(pct = num.isna / total * 100)
levels <- (missing %>% filter(isna == T) %>% arrange(pct))$key
ggplot(missing) +
geom_point(aes(reorder(key,pct),
pct,fill=pct),
stat = 'identity',size=0.5,color='grey') +
scale_x_discrete(limits = levels) +
scale_fill_manual(name = "",values = c('white','tomato'), labels = c("非缺失值", "缺失值")) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ggplot(missing) +
geom_point(aes(reorder(key,pct),
pct,fill=pct),
stat = 'identity',size=0.5,color='grey')
ggplot(missing) +
geom_point(aes(reorder(key,pct),
pct,fill=pct),
stat = 'identity',size=0.5)
ggplot(missing) +
geom_point(aes(reorder(key,pct),
pct,fill=pct),
stat = 'identity',size=0.5) +
coord_flip()
ceps <- read_csv("C:/Users/xsong/Desktop/table/cepsNA.csv")
missing.values <- ceps %>%
gather(key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
group_by(key) %>%
mutate(total = n()) %>%
group_by(key, total, isna) %>%
summarise(num.isna = n()) %>%
mutate(pct = num.isna / total * 100)
levels <- (missing.values %>% filter(isna == T) %>% arrange(pct))$key
ggplot(missing.values) +
geom_bar(aes(reorder(key,pct),
pct,fill=isna),
stat = 'identity',size=0.5,color='grey') +
scale_x_discrete(limits = levels) +
scale_fill_manual(name = "",values = c('white','tomato'), labels = c("非缺失值", "缺失值")) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ggplot(missing.values) +
geom_point(aes(reorder(key,pct),pct),color='grey')
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ggplot(missing.values) +
geom_point(aes(reorder(key,pct),pct),color='grey') +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ggplot(missing.values) +
geom_bar(aes(reorder(key,pct),
pct,fill=isna),
stat = 'identity',size=0.5,color='grey') +
scale_x_discrete(limits = levels) +
scale_fill_manual(name = "",values = c('white','tomato'), labels = c("非缺失值", "缺失值")) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ggplot(missing.values) +
geom_point(aes(reorder(key,pct),pct),color='grey') +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ggplot(missing.values) +
geom_point(aes(reorder(key,pct),pct),color='grey') +
scale_x_discrete(limits = levels) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
levels
missing.values
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),pct),color='grey') +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ggplot(missing.values) +
geom_bar(aes(reorder(key,pct),
pct,fill=isna),
stat = 'identity',size=0.5,color='grey') +
scale_x_discrete(limits = levels) +
scale_fill_manual(name = "",values = c('white','tomato'), labels = c("非缺失值", "缺失值")) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),pct),color='grey') +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),pct),color=pct) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),pct),fill=pct) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),pct)) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),pct,fill=pct)) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),pct,col=pct)) +
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
?scale_colour_viridis_d
ceps <- read_csv("C:/Users/xsong/Desktop/table/cepsNA.csv")
missing.values <- ceps %>%
gather(key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
group_by(key) %>%
mutate(total = n()) %>%
group_by(key, total, isna) %>%
summarise(num.isna = n()) %>%
mutate(pct = num.isna / total * 100) %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),
pct,col=pct)) +
scale_colour_viridis_c()+
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ceps <- read_csv("C:/Users/xsong/Desktop/table/cepsNA.csv")
missing.values <- ceps %>%
gather(key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
group_by(key) %>%
mutate(total = n()) %>%
group_by(key, total, isna) %>%
summarise(num.isna = n()) %>%
mutate(pct = num.isna / total * 100) %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),
pct,col=pct)) +
scale_colour_viridis_c()+
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ceps <- read_csv("C:/Users/xsong/Desktop/table/cepsNA.csv")
missing.values <- ceps %>%
gather(key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
group_by(key) %>%
mutate(total = n()) %>%
group_by(key, total, isna) %>%
summarise(num.isna = n()) %>%
mutate(pct = num.isna / total * 100)
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),
pct,col=pct)) +
scale_colour_viridis_c()+
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
ceps <- read_csv("C:/Users/xsong/Desktop/table/cepsNA.csv")
missing.values <- ceps %>%
gather(key = "key", value = "val") %>%
mutate(isna = is.na(val)) %>%
group_by(key) %>%
mutate(total = n()) %>%
group_by(key, total, isna) %>%
summarise(num.isna = n()) %>%
mutate(pct = num.isna / total * 100)
missing.values %>%
filter(isna == T) %>%
ggplot() +
geom_point(aes(reorder(key,pct),
pct,col=pct)) +
scale_colour_viridis_c(guide =F)+
coord_flip() +
labs(x ='变量', y = "%")+
theme_bw()
rmarkdown::convert_ipynb("C:/Users/xsong/titanic-machine-learning.ipynb", output = "C:/Users/xsong/titanic-machine-learning.Rmd")
rmarkdown:::convert_ipynb("C:/Users/xsong/titanic-machine-learning.ipynb", output = "C:/Users/xsong/titanic-machine-learning.Rmd")
library(reticulate)
?reticulate
use_condaenv()
use_python()
use_python("C:/ProgramData/Anaconda3/python.exe", required = FALSE)
import numpy as np
use_virtualenv("myenv")
Sys.which("python")
library(reticulate)
use_python("C:/ProgramData/Anaconda3", required = FALSE)
library(reticulate)
use_condaenv("C:/ProgramData/Anaconda3")
use_condaenv("myenv")
py_config()
library(reticulate)
os <- import("os")
os$listdir(".")
library(reticulate)
use_python("~/miniconda3/bin/python")
repl_python()
import numpy as np
import seaborn as sns
from scipy.stats import f
from scipy.stats import boxcox
r = f.rvs(30, 30, size=500)
np.random.seed(1234)
transformed,fitted_lambda = boxcox(r)
print('lambda=',fitted_lambda)
sns.distplot(r, rug=True,color='green')
sns.distplot(transformed, rug=True)
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import xgboost as xgb
from numpy import loadtxt
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
salary_table =pd.read_csv("E:\\R_codes\\others\\nba\\NBA_season1718_salary.csv",encoding = 'utf-8')
salary_table=salary_table[['Player','season17_18']]
salary_table=salary_table.rename(columns={'season17_18':'salary17_18'}) #变量重命名
salary_table['salary17_18']=salary_table['salary17_18']/1000000 #数据单位转化为'百万'
salary_table
quit
library(reticulate)
#use_python("C:/ProgramData/Anaconda3/python")
use_virtualenv('r-reticulate')
Sys.which("python")
repl_python()
import numpy as np
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import xgboost
from numpy import loadtxt
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
sns.set_style("whitegrid")
train= pd.read_csv('E:/MaLearning/titanic/train.csv',encoding = 'utf-8')
test= pd.read_csv('E:/MaLearning/titanic/test.csv',encoding = 'utf-8')
train
(train.isnull().sum() / len(train)) * 100
def convert_dummy(df, feature,rank=0):
pos = pd.get_dummies(df[feature], prefix=feature)
mode = df[feature].value_counts().index[rank]
biggest = feature + '_' + str(mode)
pos.drop([biggest],axis=1,inplace=True)
df.drop([feature],axis=1,inplace=True)
df=df.join(pos)
return df
virtualenv_create("r-reticulate")
virtualenv_install("r-reticulate", "scipy")
virtualenv_install("r-reticulate", "pandas")
exit
virtualenv_create("r-reticulate")
virtualenv_install("r-reticulate", "scipy")
virtualenv_install("r-reticulate", "pandas")
conda_create("r-reticulate")
conda_install("r-reticulate", "scipy")
?conda_install
conda_install("r-reticulate", "seaborn")
library(reticulate)
use_condaenv("r-reticulate")
#conda_create("r-reticulate")
#conda_install("r-reticulate", "scipy")
py_available()
use_condaenv("r-reticulate")
py_discover_config()
library(reticulate)
use_condaenv("r-reticulate")
py_module_available('seaborn')
library(reticulate)
use_condaenv("r-reticulate")
py_module_available('matplotlib')
library(reticulate)
use_condaenv("r-reticulate")
py_module_available('pandas')
py_initialize(config$python, config$libpython, config$pythonhome, config$virtualenv_activate, config$version >= "3.0", interactive(), numpy_load_error)
?py_initialize
reticulate::py_config()
library(reticulate)
use_condaenv("r-reticulate")
py_module_available('pandas')
#conda_create("r-reticulate")
#conda_install("r-reticulate", "scipy")
sessionInfo()
library(reticulate)
repl_python
repl_python()
py_available(initialize = FALSE)
py_available(initialize = FALSE)
exit
py_available()
py_module_available('pandas')
library(reticulate)
#conda_create("r-reticulate")
#conda_install("r-reticulate", "scipy")
#conda_install("r-reticulate", "pandas")
#conda_install("r-reticulate", "seaborn")
use_condaenv("r-reticulate")
py_module_available('pandas')
iris
library(reticulate)
remove.packages("reticulate", lib="~/R/win-library/3.6")
devtools::install("rstudio/reticulate")
library(devtools)
install_github('rstudio/reticulate') #可以试试，但基本不好使
#install_local("C:/Users/lenovo/Desktop/REmap-master.zip") #设置正确的本地路径
install_local("C:/Users/xsong/Desktop/reticulate-master.zip") #设置正确的本地路径
install_local("C:/Users/xsong/Desktop/reticulate-master.zip")
install.packages('Rtools')
pkgbuild::check_build_tools(debug = TRUE)
install_local("C:/Users/xsong/Desktop/reticulate-master.zip")
install.packages(c("AER", "blogdown", "bookdown", "car", "carData", "covr", "data.table", "digest", "DT", "farver", "flextable", "ggfortify", "ggpubr", "glmnet", "haven", "hexbin", "Hmisc", "hms", "jomo", "knitr", "leaflet", "officer", "openxlsx", "plotmo", "polspline", "prodlim", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "rgdal", "rlang", "rmarkdown", "rms", "roxygen2", "rticles", "rvest", "rvg", "scales", "selectr", "sp", "testthat", "tidyverse", "tinytex", "tsibble", "xaringan", "xfun"))
install.packages(c("AER", "blogdown", "bookdown", "car", "carData", "covr", "data.table", "digest", "DT", "farver", "flextable", "ggfortify", "ggpubr", "glmnet", "haven", "hexbin", "Hmisc", "hms", "jomo", "knitr", "leaflet", "officer", "openxlsx", "plotmo", "polspline", "prodlim", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "rgdal", "rlang", "rmarkdown", "rms", "roxygen2", "rticles", "rvest", "rvg", "scales", "selectr", "sp", "testthat", "tidyverse", "tinytex", "tsibble", "xaringan", "xfun"))
install_local("C:/Users/xsong/Desktop/reticulate-master.zip") #设置正确的本地路径
library('devtools')
install_local("C:/Users/xsong/Desktop/reticulate-master.zip")
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()

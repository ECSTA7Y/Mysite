result
test_dtmx
test_dtmx
new <- 'please fucking go home bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
result <- predict(svmc,test_dtmx)
result <- predict(nb,test_dtmx)
result
test_dtmx <- as.matrix(test_dtm)
result <- predict(svmc,test_dtmx)
new <- 'I\'m home.'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
result <- predict(svmc,test_dtmx)
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'CONTEST! Win A StarWars Bundle XBox One From Pornfidelity.com!- Subscribe, Like & Comment #BestCreampies On This Jessa Blue Scene To Enter!'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'A premium video is free now! Go and see it!'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'We are trying to contact you.Please call our customer service representative on FREEPHONE. You have a New Years delivery waiting for you. Call 09061701939. Claim code S89. Valid 12hrs only'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'We are trying to contact you.Please call our customer service representative on FREEPHONE.Claim code S89. Valid 12hrs only'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'please go home at 4 o clock bro'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
new <- 'We are trying to contact you.Please call our customer service representative on FREEPHONE.Claim code S89. Valid 12hrs only'
ms_corpus <- VCorpus(VectorSource(new))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
#test_dtmx <- as.matrix(test_dtm)
#result <- predict(svmc,test_dtmx)
#result
result <- predict(nb,test_dtmx)
result
#specify the packages of interest
packages = c("gtrendsR","tidyverse","usmap")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
thanksgiving <- gtrends("thanksgiving",geo = "US", time = "now 1-d")
library(rpart)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
par(mar = rep(1, 4), xpd = TRUE)
plot(fit, branch = 0.7)
text(fit, use.n = TRUE, digits = 7)
summary(fit)
fit
help(package = 'purrr')
library(purrr)
mtcars %>%
split(.$cyl) %>% # from base R
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
library(reticulate)
help(package = "reticulate")
repl_python
r-py-conversion	Convert between Python and R objects
repl_python
py
repl_python
repl_python()
def sum(x,y):
return x+y
p = lambda x,y:x+y
print(p(4,6))
a=lambda x:x*x
print(a(3))
exit
reticulate::repl_python()
a = lambda x,y,z:(x+8)*y-z
print(a(5,6,8))
a=lambda x:x*x
print(a)
print(a(3))
exit
library(rvest)
help(rvest)
knitr::opts_chunk$set(comment=NA,error=T,message = F,warning = F,fig.align='center',out.width ='90%')
library(magrittr)
library(quanteda)
library(tidytext)
library(ggplot2)
library(dplyr)
library(tm)
library(readr)
library(stringr)
sms <- read_csv("E:/MaLearning/SPAM text message 20170820 - Data.csv")
sms %>% count(Category)
#sms %$% prop.table(table(Category))[1]
smswd <- sms %>%
rename(message = Message,tag=Category) %>%
mutate(ID = row_number())
head(smswd)
Y <- as.factor(smswd$tag)
smsvis <- smswd %>%
unnest_tokens(word,message) %>%
filter(!str_detect(word, "^[0-9]*$")) %>%
anti_join(stop_words) %>%
mutate(word = SnowballC::wordStem(word))
head(smsvis)
library(reshape2)
library(wordcloud)
smsvis %>%
count(word, tag, sort = T) %>%
acast(word ~ tag, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("blue", "red"),max.words = 50)
smsvis %>%
count(tag, word) %>%
group_by(tag) %>%
top_n(15) %>%
ggplot() +
geom_col(aes(reorder(word, n),
n, fill = tag),
show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
smsvis %>%
count(tag, word) %>%
bind_tf_idf(word,tag,n) %>%
group_by(tag) %>%
top_n(10) %>%
ggplot() +
geom_col(aes(reorder(word,tf_idf),
tf_idf, fill = tag),
show.legend = F) +
facet_wrap(~tag, scales = "free_y") +
coord_flip()
ms_corpus <- VCorpus(VectorSource(smswd$message))
sms_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
dim(sms_dtm) #5572
sms_dtm1 <- removeSparseTerms(sms_dtm, sparse = .98)
smsmat <- as.matrix(sms_dtm1)
#head(smsmat)
dim(smsmat)
setwd('F:/Mysite/Mysite/static/archives/Rbasic')
save(nb,"naiveBayes.RData")
setwd('F:/Mysite/Mysite/static/archives/Rbasic')
save(nb,"naiveBayes.RData")
save(nb)
nb <- naiveBayes(smsmat, Y)
library(caret)
library(e1071)
svmc <- svm(smsmat, Y)
print(svmc)
summary(svmc)
pred <- predict(svmc,smsmat)
#confusionMatrix(pred,Y,positive ='spam',mode="prec_recall")
conMatrix <- confusionMatrix(pred,Y,
positive ='spam',
mode="prec_recall")
conMatrix[["table"]]
nb <- naiveBayes(smsmat, Y)
setwd('F:/Mysite/Mysite/static/archives/Rbasic')
save(nb,"naiveBayes.RData")
save(nb,"naiveBayes.RData")
?save
library(klaR)
setwd('F:/Mysite/Mysite/static/archives/Rbasic')
saveRDS(nb, "naiveBayes.rds")
naiveBayes <- readRDS("F:/Mysite/Mysite/static/archives/Rbasic/naiveBayes.rds")
naiveBayes
install.packages('klaR')
help(klaR)
help(package = klaR)
library(rvest)
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
rating <- lego_movie %>%
html_nodes("strong span") %>%
html_text() %>%
as.numeric()
rating
#> [1] 7.8
cast <- lego_movie %>%
html_nodes("#titleCast .primary_photo img") %>%
html_attr("alt")
cast
#>  [1] "Will Arnett"     "Elizabeth Banks" "Craig Berry"
#>  [4] "Alison Brie"     "David Burrows"   "Anthony Daniels"
#>  [7] "Charlie Day"     "Amanda Farinos"  "Keith Ferguson"
#> [10] "Will Ferrell"    "Will Forte"      "Dave Franco"
#> [13] "Morgan Freeman"  "Todd Hansen"     "Jonah Hill"
poster <- lego_movie %>%
html_nodes(".poster img") %>%
html_attr("src")
poster
#> [1] "https://m.media-amazon.com/images/M/MV5BMTg4MDk1ODExN15BMl5BanBnXkFtZTgwNzIyNjg3MDE@._V1_UX182_CR0,0,182,268_AL_.jpg"
library(rvest)
kodak <- read_html("https://xsong.ltd/zh/")
kodak
print(kodak)
?html_nodes
html_nodes(kodak)
html_nodes(kodak,'title')
html_nodes(kodak,'h1')
html_nodes(kodak,'python')
kodak <- read_html("https://search.bilibili.com/all?keyword=%E6%AF%92%E6%B6%B2&from_source=nav_search&spm_id_from=333.788.b_62696c692d6865616465722d6d.11")
kodak
html_nodes(kodak,'title')
html_nodes(kodak,'so-imgTag_rb')
html_nodes(kodak,'up-name')
kodak %>%
html_nodes(kodak,'.title') %>%
html_text()
kodak <- read_html("https://search.bilibili.com/all?keyword=%E6%AF%92%E6%B6%B2&from_source=nav_search&spm_id_from=333.788.b_62696c692d6865616465722d6d.11")
kodak %>%
html_nodes(.,'.title') %>%
html_text()
kodak %>%
html_nodes(.,'title') %>%
html_text()
?html_text
zh <- read_html("https://xsong.ltd/zh/pybasic/")
zh %>%
html_nodes(.,'.title') %>%
html_text()
zh %>%
html_nodes(.,'.h1') %>%
html_text()
kodak %>%
html_nodes(.,'.up-name') %>%
html_text()
movie <- read_html("http://www.imdb.com/title/tt1490017/")
cast <- html_nodes(movie, "#titleCast span.itemprop")
html_text(cast)
html_name(cast)
?html_attr
zh %>%
html_attr(.,'.h1') %>%
html_text()
zh %>%
html_attr(.,'.h1')
zh %>%
html_attr(.,'h1') %>%
html_text()
zh %>%
html_nodes(.,'center') %>%
html_text()
zh %>%
html_nodes(.,'.h1') %>%
html_text()
zh %>%
html_nodes(.,'h1') %>%
html_text()
zh %>%
html_attr(.,'h1') %>%
html_text()
raptors <- read_html("https://xsong.ltd/en/raptors/")
raptors %>%
html_attr(.,'h1') %>%
html_text()
raptors %>%
html_nodes(.,'h1') %>%
html_text()
library(shiny)
runExample("01_hello")
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
library(shiny]=)
library(shiny)
runExample("01_hello") # a histogram
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("07_widgets") # help text and submit buttons
runExample("08_html") # Shiny app built from HTML
runExample("09_upload") # file upload wizard
?sprintf
naiveBayes <- readRDS("D:/txtnb/naiveBayes.rds")
runApp('D:/txtnb')
function(input, output) {
output$selectVar <- renderText({
naiveBayes <- readRDS("D:/txtnb/naiveBayes.rds")
test_result <- function(model,string){
ms_corpus <- VCorpus(VectorSource(string))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
result <- predict(model,test_dtmx)
return(result)
}
test_result <- function(model,string){
ms_corpus <- VCorpus(VectorSource(string))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
result <- predict(model,test_dtmx)
return(result)
}
result <- test_result(naiveBayes,input$var)
exit
)
test_result <- function(model,string){
ms_corpus <- VCorpus(VectorSource(string))
test_dtm <- DocumentTermMatrix(ms_corpus, control =
list(tolower = T,
removeNumbers = T,
stopwords = T,
removePunctuation = T,
stemming = T))
test_dtmx <- as.matrix(test_dtm)
result <- predict(model,test_dtmx)
return(result)
}
new <- 'please go home at 4 o clock bro'
naiveBayes <- readRDS("D:/txtnb/naiveBayes.rds")
result <- test_result(naiveBayes,new)
result
runApp('D:/txtnb')
class( result)
as.character(result)
runApp('D:/txtnb')
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
runApp('D:/txtnb')
runApp('D:/txtnb')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
runApp('D:/txtnb')
runApp('D:/txtnb')
runApp('D:/txtnb')
runApp('D:/txtnb')
runApp('D:/txtnb')
runApp('D:/txtnb')
runApp('D:/txtnb')
？helpText
?helpText
runApp('D:/txtnb')
runApp('D:/txtnb')
runExample("07_widgets")
runExample("11_timer")

scale_fill_manual(name = "",values = c('skyblue','red'), labels = c("非缺失值", "缺失值")) +
coord_flip() +
labs(x ='变量', y = "百分比")+
theme_bw()
#library(readr)
ceps <- read_csv("C:/Users/xsong/Desktop/table/ceps_train.csv")
test <- read_csv("C:/Users/xsong/Desktop/table/ceps_test.csv")
x_test <- model.matrix(stdmat ~ grade9+sex+onechi+drunk+qurel+relation+desk+net+maedu+faedu+eduexp+dialect+chmwk+chcos+qianzi+futcfd+dial+chidia+eduyexp+huko+eduy+dangy+houspro+classtm+clpre+revitm+know+subject+drsmok+commhr+schcsrm+comno+buget+eduqua+teainc+schtype+fight+brkpb+smok+drink
,test)[,-1]
#schids+clsids+ids
y_test <- test %>%
select(stdmat) %>%
unlist() %>%
as.numeric()
#write.csv(cepsresponse,file="C:/Users/xsong/Desktop/table/cepsresponse.csv",row.names = F)
#options(na.action="na.fail")
library(glmnet)
x_train <- model.matrix(stdmat ~ grade9+sex+onechi+drunk+qurel+relation+desk+net+maedu+faedu+eduexp+dialect+chmwk+chcos+qianzi+futcfd+dial+chidia+eduyexp+huko+eduy+dangy+houspro+classtm+clpre+revitm+know+subject+drsmok+commhr+schcsrm+comno+buget+eduqua+teainc+schtype+fight+brkpb+smok+drink
,ceps)[,-1]
#schids+clsids+ids
y_train <- ceps %>%
select(stdmat) %>%
unlist() %>%
as.numeric()
#plot(lasso_mod,xvar="lambda",label=F,ylab='系数')
#lasso_mod
#cof <- coef(lasso_mod)
cvfit <- cv.glmnet(x_train,y_train,type.measure='mse',alpha = 1)
best <- cvfit$lambda.min
#lambda.lasso = cvfit$lambda.min
#lambda.id <- which(cvfit$lambda == cvfit$lambda.min)
#mse.1 = mse(cvfit$fit[,lambda.id],y_train)
lasso_mod <- glmnet(x_test,y_test,alpha = 1,lambda=best)
ridge_pred = predict(lasso_mod,s=best,newx=x_test)
mean((ridge_pred-y_test)^2)
#lasso.pred <- predict(lasso_mod,s=best ,newx=x[test ,])
lasso.coef <- predict(lasso_mod,type='coefficients',s=best)[1:55 ,]
#lasso.mse <- predict(lasso_mod,s=best)
coeffin <- lasso.coef %>%
as.data.frame() %>%
rename('lasso.coef'='.') %>%
mutate(name=rownames(.)) %>%
filter(lasso.coef<20)
ggplot(coeffin,aes(reorder(name,lasso.coef),lasso.coef)) +
geom_segment(aes(x=reorder(name,lasso.coef), xend=reorder(name,lasso.coef), y=0, yend=lasso.coef),size=0.7) +
geom_point(size=2, color='red')+
coord_flip()+
labs(x='变量',y='LASSO回归系数') +
theme_bw()
library(plotmo)
plot_glmnet(lasso_mod,xvar='lambda',label=15)
plot_glmnet(cvfit,xvar='lambda',label=15)
library(plotmo)
lasso_mod <- glmnet(x_train,y_x_train,alpha = 1)
plot_glmnet(cvfit,xvar='lambda',label=15)
library(plotmo)
lasso_mod <- glmnet(x_train,y_train,alpha = 1)
plot_glmnet(cvfit,xvar='lambda',label=15)
library(plotmo)
lasso <- glmnet(x_train,y_train,alpha = 1)
plot_glmnet(lasso,xvar='lambda',label=15)
#library(readr)
ceps <- read_csv("C:/Users/xsong/Desktop/table/ceps_train.csv")
test <- read_csv("C:/Users/xsong/Desktop/table/ceps_test.csv")
x_test <- model.matrix(stdmat ~ grade9+sex+onechi+drunk+qurel+relation+desk+net+maedu+faedu+eduexp+dialect+chmwk+chcos+qianzi+futcfd+dial+chidia+eduyexp+huko+eduy+dangy+houspro+classtm+clpre+revitm+know+subject+drsmok+commhr+schcsrm+comno+buget+eduqua+teainc+schtype+fight+brkpb+smok+drink
,test)[,-1]
#schids+clsids+ids
y_test <- test %>%
select(stdmat) %>%
unlist() %>%
as.numeric()
#write.csv(cepsresponse,file="C:/Users/xsong/Desktop/table/cepsresponse.csv",row.names = F)
#options(na.action="na.fail")
library(glmnet)
x_train <- model.matrix(stdmat ~ grade9+sex+onechi+drunk+qurel+relation+desk+net+maedu+faedu+eduexp+dialect+chmwk+chcos+qianzi+futcfd+dial+chidia+eduyexp+huko+eduy+dangy+houspro+classtm+clpre+revitm+know+subject+drsmok+commhr+schcsrm+comno+buget+eduqua+teainc+schtype+fight+brkpb+smok+drink
,ceps)[,-1]
#schids+clsids+ids
y_train <- ceps %>%
select(stdmat) %>%
unlist() %>%
as.numeric()
#plot(lasso_mod,xvar="lambda",label=F,ylab='系数')
#lasso_mod
#cof <- coef(lasso_mod)
cvfit <- cv.glmnet(x_train,y_train,type.measure='mse',alpha = 1)
best <- cvfit$lambda.min
#lambda.lasso = cvfit$lambda.min
#lambda.id <- which(cvfit$lambda == cvfit$lambda.min)
#mse.1 = mse(cvfit$fit[,lambda.id],y_train)
lasso_mod <- glmnet(x_test,y_test,alpha = 1,lambda=best)
ridge_pred = predict(lasso_mod,s=best,newx=x_test)
mean((ridge_pred-y_test)^2)
#lasso.pred <- predict(lasso_mod,s=best ,newx=x[test ,])
lasso.coef <- predict(lasso_mod,type='coefficients',s=best)[1:55 ,]
#lasso.mse <- predict(lasso_mod,s=best)
coeffin <- lasso.coef %>%
as.data.frame() %>%
rename('lasso.coef'='.') %>%
mutate(name=rownames(.)) %>%
filter(lasso.coef<20)
ggplot(coeffin,aes(reorder(name,lasso.coef),lasso.coef)) +
geom_segment(aes(x=reorder(name,lasso.coef), xend=reorder(name,lasso.coef), y=0, yend=lasso.coef),size=0.7) +
geom_point(size=2, color='red')+
coord_flip()+
labs(x='变量',y='LASSO回归系数') +
theme_bw()
library(plotmo)
lasso <- glmnet(x_train,y_train,alpha = 1)
plot_glmnet(lasso,xvar='lambda',label=15)
plot(cvfit)
?system.time
`%>%` <- magrittr::`%>%`
library(caret)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(pROC)
library(ROSE)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
ggplot(pokemon,aes(Total,Attack,shape=Legendary)) +
geom_point()
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point()
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=4)
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=2)
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=3)
#过采样
balance <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=748,seed = 1)$data
sampled <- sample(1:nrow(balance),nrow(balance)*0.7,replace=F)
trainpok <- balance[sampled,]
testpok <- balance[-sampled,]
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=3)
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=3)
table(balance$Legendary)
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=3)
#过采样
balance <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=748,seed = 1)$data
sampled <- sample(1:nrow(balance),nrow(balance)*0.7,replace=F)
trainpok <- balance[sampled,]
testpok <- balance[-sampled,]
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=3)
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=3)
#过采样
balance <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=748,seed = 1)$data
sampled <- sample(1:nrow(balance),nrow(balance)*0.7,replace=F)
trainpok <- balance[sampled,]
testpok <- balance[-sampled,]
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=3)
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(213)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
mutate(pred=predict(knn_fit,newdata=testpok))
?sample
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=3)
#过采样
balance <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=748,seed = 1)$data
sampled <- sample(1:nrow(balance),nrow(balance)*0.7,replace=F)
trainpok <- balance[sampled,]
testpok <- balance[-sampled,]
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=3)
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(213)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
mutate(pred=predict(knn_fit,newdata=testpok))
table(balance$ Type1)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
mutate(Legendary=as.factor(Legendary),
Type1=recode(Type1,'Fairy'='oth','Fighting'='oth','Flying'='oth'))
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
mutate(Legendary=as.factor(Legendary),
Type1=recode(Type1,'Fairy'='oth','Fighting'='oth','Flying'='oth'))
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
mutate(Type1=recode(Type1,'Fairy'='oth','Fighting'='oth','Flying'='oth'),Legendary=as.factor(Legendary),
)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
mutate(.,Type1=recode(Type1,'Fairy'='oth','Fighting'='oth','Flying'='oth'),Legendary=as.factor(Legendary),
)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
mutate(Type1=recode(Type1,'Fairy'='oth','Fighting'='oth','Flying'='oth'),Legendary=as.factor(Legendary),
)
str(pokemon)
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_point(size=3)
#过采样
balance <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=748,seed = 1)$data
sampled <- sample(1:nrow(balance),nrow(balance)*0.7,replace=F)
trainpok <- balance[sampled,]
testpok <- balance[-sampled,]
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=3)
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(213)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
mutate(pred=predict(knn_fit,newdata=testpok))
trainpok <- trainpok %>%
mutate(pred=predict(knn_fit,newdata=trainpok))
conMatrix1 <- confusionMatrix(testpok$pred,testpok$Legendary)
#matrix <- conMatrix1[["table"]]
conMatrix1
conMatrix2 <- confusionMatrix(trainpok$pred,trainpok$Legendary)
#matrix <- conMatrix[["table"]]
conMatrix2
roca <- roc(testpok$pred,testpok$Legendary)
testpok$pred
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(213)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
mutate(pred=predict(knn_fit,newdata=testpok))
trainpok <- trainpok %>%
mutate(pred=predict(knn_fit,newdata=trainpok))
conMatrix1 <- confusionMatrix(testpok$pred,testpok$Legendary)
#matrix <- conMatrix1[["table"]]
conMatrix1
conMatrix2 <- confusionMatrix(trainpok$pred,trainpok$Legendary)
#matrix <- conMatrix[["table"]]
conMatrix2
testpok$pred <- as.ordered(testpok$pred)
trainpok$pred <- as.ordered(trainpok$pred)
roca <- roc(testpok$pred,testpok$Legendary)
roca <- roc(testpok$pred,testpok$Legendary)
?predict
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(213)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
mutate(pred=predict(knn_fit,testpok),
prob=predict(knn_fit,testpok,type='prob')
)
testpok <- testpok %>%
mutate(pred=predict(knn_fit,testpok),
prob1=predict(knn_fit,testpok,type='prob')
)
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(213)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
mutate(pred=predict(knn_fit,testpok))
prob1 <- predict(knn_fit,testpok,type='prob')
pr1 <- prob1[,2]
trainpok <- trainpok %>%
mutate(pred=predict(knn_fit,trainpok))
prob2 <- predict(knn_fit,trainpok,type='prob')
pr2 <- prob2[,2]
conMatrix1 <- confusionMatrix(testpok$pred,testpok$Legendary)
#matrix <- conMatrix1[["table"]]
conMatrix1
conMatrix2 <- confusionMatrix(trainpok$pred,trainpok$Legendary)
#matrix <- conMatrix[["table"]]
conMatrix2
#testpok$pred <- as.ordered(testpok$pred)
#trainpok$pred <- as.ordered(trainpok$pred)
roca <- roc(pr1,testpok$Legendary)
pr1
pr1 <- as.numeric(pr1)
pr2 <- as.numeric(pr2)
roca <- roc(pr1,testpok$Legendary)
pr1 <- as.numeric(pr1)
pr2 <- as.numeric(pr2)
testpok$Legendary <- as.ordered(testpok$Legendary)
trainpok$Legendary <- as.ordered(trainpok$Legendary)
roca <- roc(pr1,testpok$Legendary)
rocb <- roc(pr2,trainpok$Legendary)
ggroc(list(test=roca,train=rocb))
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(213)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
mutate(pred=predict(knn_fit,testpok))
prob1 <- predict(knn_fit,testpok,type='prob')
pr1 <- prob1[,2]
trainpok <- trainpok %>%
mutate(pred=predict(knn_fit,trainpok))
prob2 <- predict(knn_fit,trainpok,type='prob')
pr2 <- prob2[,2]
conMatrix1 <- confusionMatrix(testpok$pred,testpok$Legendary)
#matrix <- conMatrix1[["table"]]
conMatrix1
conMatrix2 <- confusionMatrix(trainpok$pred,trainpok$Legendary)
#matrix <- conMatrix[["table"]]
conMatrix2
pr1 <- as.numeric(pr1)
pr2 <- as.numeric(pr2)
testpok$Legendary <- as.ordered(testpok$Legendary)
trainpok$Legendary <- as.ordered(trainpok$Legendary)
roca <- roc(pr1,testpok$Legendary)
rocb <- roc(pr2,trainpok$Legendary)
ggroc(list(test=roca,train=rocb))
# geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="grey", linetype="dashed")
pr2
roca
View(roca)
roca[["sensitivities"]]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(213)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
mutate(pred=predict(knn_fit,testpok))
prob1 <- predict(knn_fit,testpok,type='prob')
pr1 <- prob1[,2]
trainpok <- trainpok %>%
mutate(pred=predict(knn_fit,trainpok))
prob2 <- predict(knn_fit,trainpok,type='prob')
pr2 <- prob2[,2]
conMatrix1 <- confusionMatrix(testpok$pred,testpok$Legendary)
#matrix <- conMatrix1[["table"]]
conMatrix1
conMatrix2 <- confusionMatrix(trainpok$pred,trainpok$Legendary)
#matrix <- conMatrix[["table"]]
conMatrix2
pr1 <- as.numeric(pr1)
pr2 <- as.numeric(pr2)
testpok$Legendary <- as.ordered(testpok$Legendary)
trainpok$Legendary <- as.ordered(trainpok$Legendary)
roca <- roc(testpok$Legendary,pr1)
rocb <- roc(trainpok$Legendary,pr2)
ggroc(list(test=roca,train=rocb))
# geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="grey", linetype="dashed")
nrow(balance)
nrow(pokemon)
View(balance)
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=3)
ggroc(list(test=roca,train=rocb))+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="grey", linetype="dashed")
ggroc(list(test=roca,train=rocb))+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype="dashed")
ggroc(list(测试集=roca,训练集=rocb))+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype="dashed")
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=1)
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=1,height = 10, width = 10)
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=1,height = 10, width = 20)
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=1,height = 10, width = 40)
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=2,height = 10, width = 40)
ggplot(balance,aes(Total,Attack,shape=Legendary,color=Legendary)) +
geom_jitter(size=1.5,height = 10, width = 40)
?ggroc
ggroc(list(测试集=roca,训练集=rocb), legacy.axes = TRUE)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype="dashed")
ggroc(list(测试集=roca,训练集=rocb),size=4)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype="dashed")
ggroc(list(测试集=roca,训练集=rocb),size=2)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype="dashed")
ggroc(list(测试集=roca,训练集=rocb),size=1)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype="dashed")
ggroc(list(测试集=roca,训练集=rocb),size=1)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype='dashed')+
theme(legend.title=element_blank())
ggroc(list('测试集'=roca,'训练集'=rocb),size=1)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype='dashed')+
theme(legend.title=element_blank())
ggroc(list('测试集'=roca,'训练集'=rocb),size=1)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype='dashed')+
theme(legend.title='element_blank()')
ggroc(list('测试集'=roca,'训练集'=rocb),size=1)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color='black', linetype='dashed')+
theme(legend.title=element_blank())
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) + geom_hex()
install.packages('hexbin')
ggplot(pokemon,aes(Total,Attack,shape=Legendary,color=Legendary)) + geom_hex()
ggplot(pokemon,aes(Total,Attack)) + geom_hex()
ggplot(pokemon,aes(Total,Attack)) + geom_density2d()
ggplot(pokemon,aes(Total,Attack)) + geom_bin2d()
ggplot(pokemon,aes(Total,Attack)) + ggplot(pokemon,aes(Total,Attack)) + geom_density2d()
ggplot(pokemon,aes(Total,Attack)) + geom_density2d()

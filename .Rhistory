require(data.table)
require(ggplot2)
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
class(train)
ggplot(train[,.(SalePrice)],
aes(SalePrice,..density..))+
geom_histogram(col='black',
fill = 'white')+
geom_density(alpha=.2,
fill="#FF6666")
train$MasVnrArea = as.numeric(train$MasVnrArea)
test$MasVnrArea = as.numeric(test$MasVnrArea)
# make all column of data to be as numeric, thus char columns will turn to NA
# then delete columns that contains all NAs
numcols = apply(train,2,as.numeric)
numcols = numcols[,colSums(numcols,na.rm = T) != 0]
# use invisible() to mute all infomation printing.
# loop continuous columns names of data and plot a histgram for each of them.
invisible(
lapply(colnames(numcols),
function(x) hist(numcols[,x],main=x,
xlab = x))
)
library(corrplot)
corrplot(cor(numcols,
use = 'complete.obs'),
method = 'circle')
# define 2 functions
# first off, fill NA and recode Outliers to 0.75 quantile
fillna_correct = function(df,var,quant=0.75){
var = as.character(substitute(var))
col = df[[var]]
set(df, i = which(is.na(col)), j = var,
value = mean(col, na.rm=T))
q3 = quantile(col,quant,na.rm=T)
set(df,i = which(col > q3),j = var,
value = q3)
#return(df)
}
# just fill NA
fillna = function(df,var){
var = as.character(substitute(var))
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
#return(df)
}
build_design_matrix = function(x,y,equalfor){
y = as.character(substitute(y))
#`select` = dplyr::`select`
cont1 = apply(x ,2,as.numeric)
numcols = cont1[,colSums(cont1,na.rm = T) != 0] # 判断连续变量
chrcols = cont1[,colSums(cont1,na.rm = T) == 0] # 判断字符变量
numcols = as.data.frame(numcols) # 连续变量列
#numcols = select(numcols,-y) # 连续变量列
#numcols = numcols[,y:=NULL]
chrcols = x[,colnames(chrcols)] # 字符变量
#numcols = scale(numcols,center = T,scale = T) #标准化数据,只标准连续变量
dt = cbind(numcols,chrcols) #按列合并数据
stdmat = x[[y]]
dt = cbind(dt,stdmat)
dt = model.matrix(equalfor,dt)[,-1] # 删除截距列
dt = cbind(dt,stdmat)
dt = as.data.frame(dt)
return(dt)
}
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
train[BsmtFinSF2>0,BsmtFinSF2:=1]
test[BsmtFinSF2>0,BsmtFinSF2:=1]
train[LotArea<=9478,LotArea:=0]
train[LotArea>9478,LotArea:=1]
test[LotArea<=9478,LotArea:=0]
test[LotArea>9478,LotArea:=1]
train[LotShape =='IR2' | LotShape =='IR3',LotShape:='IR1']
test[LotShape =='IR2' | LotShape =='IR3',LotShape:='IR1']
train[MSZoning !='RL',MSZoning:='RM']
test[MSZoning !='RL',MSZoning:='RM']
train[LandContour !='Lvl',LandContour:='oth']
test[LandContour !='Lvl',LandContour:='oth']
train[LotConfig =='FR2' | LotConfig =='FR3',LotConfig:='CulDSac']
test[LotConfig =='FR2' | LotConfig =='FR3',LotConfig:='CulDSac']
train[LandSlope !='Gtl',LandSlope:='oth']
test[LandSlope !='Gtl',LandSlope:='oth']
train[Condition1 !='Norm',Condition1:='oth']
test[Condition1 !='Norm',Condition1:='oth']
train[BldgType !='1Fam' & BldgType !='TwnhsE',BldgType:='TwnhsE']
test[BldgType !='1Fam'& BldgType !='TwnhsE',BldgType:='TwnhsE']
#
train[HouseStyle !='1Story' & HouseStyle !='2Story' & HouseStyle !='1.5Fin',HouseStyle:='1.5Fin']
test[HouseStyle !='1Story' & HouseStyle !='2Story' & HouseStyle !='1.5Fin',HouseStyle:='1.5Fin']
train[RoofStyle !='Gable',RoofStyle:='oth']
test[RoofStyle !='Gable',RoofStyle:='oth']
train[Exterior1st !='VinylSd',Exterior1st:='oth']
test[Exterior1st !='VinylSd',Exterior1st:='oth']
train[Exterior2nd !='VinylSd',Exterior2nd:='oth']
test[Exterior2nd !='VinylSd',Exterior2nd:='oth']
train[MasVnrType !='None',MasVnrType:='oth']
test[MasVnrType !='None',MasVnrType:='oth']
train$MasVnrArea = as.numeric(train$MasVnrArea)
test$MasVnrArea = as.numeric(test$MasVnrArea)
# fill NA by mean
fillna(train,LotFrontage)
fillna(test,LotFrontage)
fillna(train,MasVnrArea)
fillna(test,MasVnrArea)
train[ExterQual =='Ex',ExterQual:='Gd']
test[ExterQual =='Ex',ExterQual:='Gd']
train[ExterQual =='Fa',ExterQual:='TA']
test[ExterQual =='Fa',ExterQual:='TA']
train[ExterCond =='Fa' | ExterCond =='Po',ExterCond:='TA']
test[ExterCond =='Fa' | ExterCond =='Po',ExterCond:='TA']
train[ExterCond =='Ex',ExterCond:='Gd']
test[ExterCond =='Ex',ExterCond:='Gd']
train[Foundation !='PConc',Foundation:='oth']
test[Foundation !='PConc',Foundation:='oth']
train[is.na(BsmtQual),BsmtQual:='TA']
test[is.na(BsmtQual),BsmtQual:='TA']
train[is.na(BsmtCond),BsmtCond:='TA']
test[is.na(BsmtCond),BsmtCond:='TA']
train[BsmtCond=='Po',BsmtCond:='Fa']
test[BsmtCond=='Po',BsmtCond:='Fa']
train[is.na(BsmtExposure),BsmtExposure:='No']
test[is.na(BsmtExposure),BsmtExposure:='No']
train[is.na(BsmtFinType1),BsmtFinType1:='Unf']
test[is.na(BsmtFinType1),BsmtFinType1:='Unf']
train[is.na(BsmtFinType2),BsmtFinType2:='Unf']
test[is.na(BsmtFinType2),BsmtFinType2:='Unf']
fillna_correct(train,BsmtFinSF1)
fillna_correct(test,BsmtFinSF1)
fillna_correct(train,BsmtFinSF2)
fillna_correct(test,BsmtFinSF2)
fillna(train,BsmtUnfSF)
fillna(test,BsmtUnfSF)
fillna(train,TotalBsmtSF)
fillna(test,TotalBsmtSF)
train[HeatingQC=='Po' ,HeatingQC:='Fa']
test[HeatingQC=='Po',HeatingQC:='Fa']
train[Electrical !='SBrkr' | is.na(Electrical),Electrical:='oth']
test[Electrical !='SBrkr',Electrical:='oth']
fillna_correct(train,`1stFlrSF`,0.9)
fillna_correct(test,`1stFlrSF`,0.9)
fillna_correct(train,`2ndFlrSF`,0.9)
fillna_correct(test,`2ndFlrSF`,0.9)
fillna_correct(train,`GrLivArea`,0.9)
fillna_correct(test,`GrLivArea`,0.9)
train[LowQualFinSF>0,LowQualFinSF:=1]
test[LowQualFinSF>0,LowQualFinSF:=1]
train[BsmtFullBath>1 | is.na(BsmtFullBath),BsmtFullBath:=1]
test[BsmtFullBath>1 | is.na(BsmtFullBath),BsmtFullBath:=1]
train[BsmtHalfBath>1 | is.na(BsmtHalfBath),BsmtHalfBath:=1]
test[BsmtHalfBath>1 | is.na(BsmtHalfBath),BsmtHalfBath:=1]
train[FullBath<=1,FullBath:=0]
test[FullBath<=1,FullBath:=0]
train[FullBath>=2,FullBath:=1]
test[FullBath>=2,FullBath:=1]
train[HalfBath>=1,HalfBath:=1]
test[HalfBath>=1,HalfBath:=1]
train[BedroomAbvGr>5,BedroomAbvGr:=5]
test[BedroomAbvGr>5,BedroomAbvGr:=5]
train[BedroomAbvGr<1,BedroomAbvGr:=1]
test[BedroomAbvGr<1,BedroomAbvGr:=1]
train[KitchenAbvGr<=1,KitchenAbvGr:=0]
test[KitchenAbvGr<=1,KitchenAbvGr:=0]
train[KitchenAbvGr>=2,KitchenAbvGr:=1]
test[KitchenAbvGr>=2,KitchenAbvGr:=1]
train[KitchenQual=='Fa' ,KitchenQual:='TA']
test[KitchenQual=='Fa',KitchenQual:='TA']
train[Functional !='Typ',Functional:='oth']
test[Functional !='Typ' | is.na(Functional),Functional:='oth']
train[is.na(FireplaceQu),FireplaceQu:='No']
test[is.na(FireplaceQu),FireplaceQu:='No']
train[FireplaceQu != 'Gd' & FireplaceQu != 'TA' & FireplaceQu != 'No',FireplaceQu:='TA']
test[FireplaceQu != 'Gd' & FireplaceQu != 'TA' & FireplaceQu != 'No',FireplaceQu:='TA']
#train[is.na(FireplaceQu),FireplaceQu:='No']
#test[is.na(FireplaceQu),FireplaceQu:='No']
train[GarageType !='Attchd' | is.na(GarageType),GarageType:='oth']
test[GarageType !='Attchd' | is.na(GarageType),GarageType:='oth']
fillna(train,GarageYrBlt)
fillna(test,GarageYrBlt)
train[is.na(GarageFinish),GarageFinish:='Fin']
test[is.na(GarageFinish),GarageFinish:='Fin']
fillna(train,GarageCars)
fillna(test,GarageCars)
fillna(train,GarageArea)
fillna(test,GarageArea)
train[GarageQual !='TA'| is.na(GarageQual),GarageQual:='oth']
test[GarageQual !='TA'| is.na(GarageQual),GarageQual:='oth']
train[GarageCond !='TA'| is.na(GarageCond),GarageCond:='oth']
test[GarageCond !='TA'| is.na(GarageCond),GarageCond:='oth']
train[PavedDrive !='Y',PavedDrive:='N']
test[PavedDrive !='Y',PavedDrive:='N']
fillna(train,WoodDeckSF)
fillna(test,WoodDeckSF)
fillna_correct(train,OpenPorchSF,0.9)
fillna_correct(test,OpenPorchSF,0.9)
fillna_correct(train,EnclosedPorch,0.8)
fillna_correct(test,EnclosedPorch,0.8)
train[is.na(Fence),Fence:='No']
train[Fence!='No',Fence:='Oth']
test[is.na(Fence),Fence:='No']
test[Fence!='No',Fence:='Oth']
fillna(train,MoSold)
fillna(test,MoSold)
fillna(train,YrSold)
fillna(test,YrSold)
train[is.na(SaleType)|SaleType!='WD',SaleType:='Oth']
test[is.na(SaleType)|SaleType!='WD',SaleType:='Oth']
train[is.na(SaleCondition)|SaleCondition!='Normal',SaleCondition:='Oth']
test[is.na(SaleCondition)|SaleCondition!='Normal',SaleCondition:='Oth']
fillna_correct(train,SalePrice,0.9)
fillna_correct(test,SalePrice,0.9)
#hist(train[,BsmtFinSF1])
table(train[,Neighborhood],useNA ="always")
table(test[,Neighborhood],useNA ="always")
#summary(train[,OpenPorchSF])
#summary(test[,OpenPorchSF])
# delete features without variance
train = train[,!c('Street','Alley','Utilities','Condition2','RoofMatl','Heating','PoolQC','MiscFeature','LowQualFinSF','3SsnPorch','ScreenPorch','PoolArea','MiscVal','Id')]
test = test[,!c('Street','Alley','Utilities','Condition2','RoofMatl','Heating','PoolQC','MiscFeature','LowQualFinSF','3SsnPorch','ScreenPorch','PoolArea','MiscVal','Id')]
#library(magrittr)
`%>%` = magrittr::`%>%`
library(dplyr)
train = train %>%
lapply(.,unclass) %>%
as.data.frame() %>%
mutate_if(sapply(.,is.character),as.factor) %>%
mutate_if(sapply(.,is.factor),droplevels) %>%
na_if('NA')
test = test %>%
lapply(.,unclass) %>%
as.data.frame() %>%
mutate_if(sapply(.,is.character),as.factor) %>%
mutate_if(sapply(.,is.factor),droplevels) %>%
na_if('NA')
#setDT(test)
test[,SalePrice := 1]
train1 = model.matrix(SalePrice~.,train)[,-1]
test1 = model.matrix(SalePrice~.,test)[,-1]
#setDT(test)
#train1 = build_design_matrix(train,SalePrice,SalePrice~.)
#test1 = build_design_matrix(test,SalePrice,SalePrice~.)
library(data.table)
test[,SalePrice := 1]
train1 = model.matrix(SalePrice~.,train)[,-1]
test1 = model.matrix(SalePrice~.,test)[,-1]
help(":=")
test[,SalePrice := 1]
library(data.table)
setDT(test)
test[,SalePrice := 1]
View(numcols)
View(test)
train1 = model.matrix(SalePrice~.,train)[,-1]
test1 = model.matrix(SalePrice~.,test)[,-1]
View(train1)
train1 = as.data.frame(train1)
train2 = as.data.frame(train2)
train1 = as.data.frame(train1)
test1 = as.data.frame(test1)
knitr::opts_chunk$set(comment='#',error=T,message = F,warning = F,fig.align='center',out.width ='90%')
require(data.table)
require(ggplot2)
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
class(train)
ggplot(train[,.(SalePrice)],
aes(SalePrice,..density..))+
geom_histogram(col='black',
fill = 'white')+
geom_density(alpha=.2,
fill="#FF6666")
train$MasVnrArea = as.numeric(train$MasVnrArea)
test$MasVnrArea = as.numeric(test$MasVnrArea)
# make all column of data to be as numeric, thus char columns will turn to NA
# then delete columns that contains all NAs
numcols = apply(train,2,as.numeric)
numcols = numcols[,colSums(numcols,na.rm = T) != 0]
# use invisible() to mute all infomation printing.
# loop continuous columns names of data and plot a histgram for each of them.
invisible(
lapply(colnames(numcols),
function(x) hist(numcols[,x],main=x,
xlab = x))
)
library(corrplot)
corrplot(cor(numcols,
use = 'complete.obs'),
method = 'circle')
# define 2 functions
# first off, fill NA and recode Outliers to 0.75 quantile
fillna_correct = function(df,var,quant=0.75){
var = as.character(substitute(var))
col = df[[var]]
set(df, i = which(is.na(col)), j = var,
value = mean(col, na.rm=T))
q3 = quantile(col,quant,na.rm=T)
set(df,i = which(col > q3),j = var,
value = q3)
#return(df)
}
# just fill NA
fillna = function(df,var){
var = as.character(substitute(var))
col = df[[var]]
set(df, i = which(is.na(col)), j = var, value = mean(col, na.rm=T))
#return(df)
}
build_design_matrix = function(x,y,equalfor){
y = as.character(substitute(y))
#`select` = dplyr::`select`
cont1 = apply(x ,2,as.numeric)
numcols = cont1[,colSums(cont1,na.rm = T) != 0] # 判断连续变量
chrcols = cont1[,colSums(cont1,na.rm = T) == 0] # 判断字符变量
numcols = as.data.frame(numcols) # 连续变量列
#numcols = select(numcols,-y) # 连续变量列
#numcols = numcols[,y:=NULL]
chrcols = x[,colnames(chrcols)] # 字符变量
#numcols = scale(numcols,center = T,scale = T) #标准化数据,只标准连续变量
dt = cbind(numcols,chrcols) #按列合并数据
stdmat = x[[y]]
dt = cbind(dt,stdmat)
dt = model.matrix(equalfor,dt)[,-1] # 删除截距列
dt = cbind(dt,stdmat)
dt = as.data.frame(dt)
return(dt)
}
train = fread("E:/MaLearning/house_price/train.csv")
test = fread("E:/MaLearning/house_price/test.csv")
train[BsmtFinSF2>0,BsmtFinSF2:=1]
test[BsmtFinSF2>0,BsmtFinSF2:=1]
train[LotArea<=9478,LotArea:=0]
train[LotArea>9478,LotArea:=1]
test[LotArea<=9478,LotArea:=0]
test[LotArea>9478,LotArea:=1]
train[LotShape =='IR2' | LotShape =='IR3',LotShape:='IR1']
test[LotShape =='IR2' | LotShape =='IR3',LotShape:='IR1']
train[MSZoning !='RL',MSZoning:='RM']
test[MSZoning !='RL',MSZoning:='RM']
train[LandContour !='Lvl',LandContour:='oth']
test[LandContour !='Lvl',LandContour:='oth']
train[LotConfig =='FR2' | LotConfig =='FR3',LotConfig:='CulDSac']
test[LotConfig =='FR2' | LotConfig =='FR3',LotConfig:='CulDSac']
train[LandSlope !='Gtl',LandSlope:='oth']
test[LandSlope !='Gtl',LandSlope:='oth']
train[Condition1 !='Norm',Condition1:='oth']
test[Condition1 !='Norm',Condition1:='oth']
train[BldgType !='1Fam' & BldgType !='TwnhsE',BldgType:='TwnhsE']
test[BldgType !='1Fam'& BldgType !='TwnhsE',BldgType:='TwnhsE']
#
train[HouseStyle !='1Story' & HouseStyle !='2Story' & HouseStyle !='1.5Fin',HouseStyle:='1.5Fin']
test[HouseStyle !='1Story' & HouseStyle !='2Story' & HouseStyle !='1.5Fin',HouseStyle:='1.5Fin']
train[RoofStyle !='Gable',RoofStyle:='oth']
test[RoofStyle !='Gable',RoofStyle:='oth']
train[Exterior1st !='VinylSd',Exterior1st:='oth']
test[Exterior1st !='VinylSd',Exterior1st:='oth']
train[Exterior2nd !='VinylSd',Exterior2nd:='oth']
test[Exterior2nd !='VinylSd',Exterior2nd:='oth']
train[MasVnrType !='None',MasVnrType:='oth']
test[MasVnrType !='None',MasVnrType:='oth']
train$MasVnrArea = as.numeric(train$MasVnrArea)
test$MasVnrArea = as.numeric(test$MasVnrArea)
# fill NA by mean
fillna(train,LotFrontage)
fillna(test,LotFrontage)
fillna(train,MasVnrArea)
fillna(test,MasVnrArea)
train[ExterQual =='Ex',ExterQual:='Gd']
test[ExterQual =='Ex',ExterQual:='Gd']
train[ExterQual =='Fa',ExterQual:='TA']
test[ExterQual =='Fa',ExterQual:='TA']
train[ExterCond =='Fa' | ExterCond =='Po',ExterCond:='TA']
test[ExterCond =='Fa' | ExterCond =='Po',ExterCond:='TA']
train[ExterCond =='Ex',ExterCond:='Gd']
test[ExterCond =='Ex',ExterCond:='Gd']
train[Foundation !='PConc',Foundation:='oth']
test[Foundation !='PConc',Foundation:='oth']
train[is.na(BsmtQual),BsmtQual:='TA']
test[is.na(BsmtQual),BsmtQual:='TA']
train[is.na(BsmtCond),BsmtCond:='TA']
test[is.na(BsmtCond),BsmtCond:='TA']
train[BsmtCond=='Po',BsmtCond:='Fa']
test[BsmtCond=='Po',BsmtCond:='Fa']
train[is.na(BsmtExposure),BsmtExposure:='No']
test[is.na(BsmtExposure),BsmtExposure:='No']
train[is.na(BsmtFinType1),BsmtFinType1:='Unf']
test[is.na(BsmtFinType1),BsmtFinType1:='Unf']
train[is.na(BsmtFinType2),BsmtFinType2:='Unf']
test[is.na(BsmtFinType2),BsmtFinType2:='Unf']
fillna_correct(train,BsmtFinSF1)
fillna_correct(test,BsmtFinSF1)
fillna_correct(train,BsmtFinSF2)
fillna_correct(test,BsmtFinSF2)
fillna(train,BsmtUnfSF)
fillna(test,BsmtUnfSF)
fillna(train,TotalBsmtSF)
fillna(test,TotalBsmtSF)
train[HeatingQC=='Po' ,HeatingQC:='Fa']
test[HeatingQC=='Po',HeatingQC:='Fa']
train[Electrical !='SBrkr' | is.na(Electrical),Electrical:='oth']
test[Electrical !='SBrkr',Electrical:='oth']
fillna_correct(train,`1stFlrSF`,0.9)
fillna_correct(test,`1stFlrSF`,0.9)
fillna_correct(train,`2ndFlrSF`,0.9)
fillna_correct(test,`2ndFlrSF`,0.9)
fillna_correct(train,`GrLivArea`,0.9)
fillna_correct(test,`GrLivArea`,0.9)
train[LowQualFinSF>0,LowQualFinSF:=1]
test[LowQualFinSF>0,LowQualFinSF:=1]
train[BsmtFullBath>1 | is.na(BsmtFullBath),BsmtFullBath:=1]
test[BsmtFullBath>1 | is.na(BsmtFullBath),BsmtFullBath:=1]
train[BsmtHalfBath>1 | is.na(BsmtHalfBath),BsmtHalfBath:=1]
test[BsmtHalfBath>1 | is.na(BsmtHalfBath),BsmtHalfBath:=1]
train[FullBath<=1,FullBath:=0]
test[FullBath<=1,FullBath:=0]
train[FullBath>=2,FullBath:=1]
test[FullBath>=2,FullBath:=1]
train[HalfBath>=1,HalfBath:=1]
test[HalfBath>=1,HalfBath:=1]
train[BedroomAbvGr>5,BedroomAbvGr:=5]
test[BedroomAbvGr>5,BedroomAbvGr:=5]
train[BedroomAbvGr<1,BedroomAbvGr:=1]
test[BedroomAbvGr<1,BedroomAbvGr:=1]
train[KitchenAbvGr<=1,KitchenAbvGr:=0]
test[KitchenAbvGr<=1,KitchenAbvGr:=0]
train[KitchenAbvGr>=2,KitchenAbvGr:=1]
test[KitchenAbvGr>=2,KitchenAbvGr:=1]
train[KitchenQual=='Fa' ,KitchenQual:='TA']
test[KitchenQual=='Fa',KitchenQual:='TA']
train[Functional !='Typ',Functional:='oth']
test[Functional !='Typ' | is.na(Functional),Functional:='oth']
train[is.na(FireplaceQu),FireplaceQu:='No']
test[is.na(FireplaceQu),FireplaceQu:='No']
train[FireplaceQu != 'Gd' & FireplaceQu != 'TA' & FireplaceQu != 'No',FireplaceQu:='TA']
test[FireplaceQu != 'Gd' & FireplaceQu != 'TA' & FireplaceQu != 'No',FireplaceQu:='TA']
#train[is.na(FireplaceQu),FireplaceQu:='No']
#test[is.na(FireplaceQu),FireplaceQu:='No']
train[GarageType !='Attchd' | is.na(GarageType),GarageType:='oth']
test[GarageType !='Attchd' | is.na(GarageType),GarageType:='oth']
fillna(train,GarageYrBlt)
fillna(test,GarageYrBlt)
train[is.na(GarageFinish),GarageFinish:='Fin']
test[is.na(GarageFinish),GarageFinish:='Fin']
fillna(train,GarageCars)
fillna(test,GarageCars)
fillna(train,GarageArea)
fillna(test,GarageArea)
train[GarageQual !='TA'| is.na(GarageQual),GarageQual:='oth']
test[GarageQual !='TA'| is.na(GarageQual),GarageQual:='oth']
train[GarageCond !='TA'| is.na(GarageCond),GarageCond:='oth']
test[GarageCond !='TA'| is.na(GarageCond),GarageCond:='oth']
train[PavedDrive !='Y',PavedDrive:='N']
test[PavedDrive !='Y',PavedDrive:='N']
fillna(train,WoodDeckSF)
fillna(test,WoodDeckSF)
fillna_correct(train,OpenPorchSF,0.9)
fillna_correct(test,OpenPorchSF,0.9)
fillna_correct(train,EnclosedPorch,0.8)
fillna_correct(test,EnclosedPorch,0.8)
train[is.na(Fence),Fence:='No']
train[Fence!='No',Fence:='Oth']
test[is.na(Fence),Fence:='No']
test[Fence!='No',Fence:='Oth']
fillna(train,MoSold)
fillna(test,MoSold)
fillna(train,YrSold)
fillna(test,YrSold)
train[is.na(SaleType)|SaleType!='WD',SaleType:='Oth']
test[is.na(SaleType)|SaleType!='WD',SaleType:='Oth']
train[is.na(SaleCondition)|SaleCondition!='Normal',SaleCondition:='Oth']
test[is.na(SaleCondition)|SaleCondition!='Normal',SaleCondition:='Oth']
fillna_correct(train,SalePrice,0.9)
fillna_correct(test,SalePrice,0.9)
#hist(train[,BsmtFinSF1])
table(train[,Neighborhood],useNA ="always")
table(test[,Neighborhood],useNA ="always")
#summary(train[,OpenPorchSF])
#summary(test[,OpenPorchSF])
# delete features without variance
train = train[,!c('Street','Alley','Utilities','Condition2','RoofMatl','Heating','PoolQC','MiscFeature','LowQualFinSF','3SsnPorch','ScreenPorch','PoolArea','MiscVal','Id')]
test = test[,!c('Street','Alley','Utilities','Condition2','RoofMatl','Heating','PoolQC','MiscFeature','LowQualFinSF','3SsnPorch','ScreenPorch','PoolArea','MiscVal','Id')]
#library(magrittr)
`%>%` = magrittr::`%>%`
library(dplyr)
train = train %>%
lapply(.,unclass) %>%
as.data.frame() %>%
mutate_if(sapply(.,is.character),as.factor) %>%
mutate_if(sapply(.,is.factor),droplevels) %>%
na_if('NA')
test = test %>%
lapply(.,unclass) %>%
as.data.frame() %>%
mutate_if(sapply(.,is.character),as.factor) %>%
mutate_if(sapply(.,is.factor),droplevels) %>%
na_if('NA')
#setDT(test)
library(data.table)
setDT(test)
test[,SalePrice := 1]
train1 = model.matrix(SalePrice~.,train)[,-1]
test1 = model.matrix(SalePrice~.,test)[,-1]
train1 = as.data.frame(train1)
test1 = as.data.frame(test1)
#setDT(test)
#train1 = build_design_matrix(train,SalePrice,SalePrice~.)
#test1 = build_design_matrix(test,SalePrice,SalePrice~.)
View(train1)
nrow(ttest)
nrow(test)
write.csv(train1,file="E:/MaLearning/house_price/train1.csv",row.names = F)
write.csv(test1,file="E:/MaLearning/house_price/test1.csv",row.names = F)

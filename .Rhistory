stocks %>% mutate(year= ifelse(is.na(qtr)==T,9999,year))
stocks %>% mutate(year= ifelse(is.na(qtr)==T,9999,year))
stocks %>% mutate(year=if_else(qtr==qtr,qtr,qtr,9999))
?replace_na
?replace_with_na_if
update.packages('dplyr')
?replace_na
???replace_na
???replace_na
??replace_na
library(tidyr)
?replace_with_na_all
??replace_with_na_all
??replace_with_na_if
update.packages('tidyr')
library(tidyr)
?replace_with_na_if
??replace_with_na_if
?utils
library(help = "utils")
vignette(, package = "rpart")
browseVignettes(package = "rpart")
install.packages("sqldf")
library(sqldf)
newdf <- sqldf("select * from mtcars where carb=1 order by mpg",
row.names=TRUE)
newdf
library(caret)
library(readr)
library(tidyr)
library(dplyr)
`%>%` <- magrittr::`%>%`
library(kknn)
library(ggplot2)
library(pROC)
repeatedcv <-trainControl(method ="repeatedcv", number =10,repeats =10, savePredictions
=TRUE)
rpartFit <- train(medv ~ .,
data = BostonHousing,
method = "rpart",
trControl = repeatedcv)
rfControl <-trainControl( #10折交叉验证
method ="cv",
number =10
)
library(mlbench) #加载数据集
data(BostonHousing)
head(BostonHousing)
nrow(BostonHousing) #样本量
rpartFit <- train(medv ~ .,
data = BostonHousing,
method = "rpart",
trControl = rfControl)
rpartFit
repeatedcv <-trainControl(method ="repeatedcv", number =10,repeats =10, savePredictions
=TRUE)
rpartFit <- train(medv ~ .,
data = BostonHousing,
method = "rpart",
trControl = repeatedcv)
rpartFit
importance <- varImp(rpartFit, scale = F)
imp <- as.data.frame(importance[["importance"]])
imp <- imp %>%
mutate(name=rownames(imp)) %>%
filter(Overall>0) %>%
rename('impt'='Overall') #%>%
#mutate(varname = fct_reorder(varname,impt))
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width=.85)) +
geom_bar(stat = 'identity',width = 0.1)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width=.85)) +
geom_bar(stat = 'identity',width = 0.2)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width=.85)) +
geom_bar(stat = 'identity',width = 0.05)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.55)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity')+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.3)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.3)) +
geom_bar(stat = 'identity',width = 0.3)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity',width = 0.3)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.2)) +
geom_bar(stat = 'identity',width = 0.3)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.1)) +
geom_bar(stat = 'identity',width = 0.3)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.1)) +
geom_bar(stat = 'identity',width = 0.3)+
coord_flip()+
xlab('重要性')+
ylab('变量名')+
opts(title="width = .5")
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.1)) +
geom_bar(stat = 'identity',width = 0.3)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity',width = 0.3)+
coord_flip()+
xlab('重要性')+
ylab('变量名')
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity',width = 0.3) +
coord_flip() +
labs(x="重要性", y="变量名")
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity') +
coord_flip() +
labs(x="重要性",y="变量名")
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity') +
coord_flip() +
labs(x="重要性",y="变量名")+
scale_x_discrete(breaks = NA)
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity') +
coord_flip() +
labs(x="重要性",y="变量名")
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity') +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity',position='dodge') +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity',position = position_dodge(width=0.5)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity',position = position_dodge(width=0.1)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt,width = 0.5)) +
geom_bar(stat = 'identity',position = position_dodge(width=0.9)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.5,position = position_dodge(width=0.9)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.1,position = position_dodge(width=0.9)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.1,position = position_dodge(width=0.1)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.1,position = position_dodge(width=0.1)) +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.5,position = position_dodge(width=0.1)) +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.1,position = position_dodge(width=1)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',position = position_dodge(width=1)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',position = position_dodge(width=0.3)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',position = position_dodge(width=0.1)) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.7) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.5) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_bar(stat = 'identity',width = 0.2) +
coord_flip() +
labs(x="重要性",y="变量名") +
theme_bw()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
ggplot(imp,aes(reorder(name,impt),impt,color=impt,fill=impt)) +
geom_segment( aes(x=reorder(name,impt), xend=reorder(name,impt), y=0, yend=impt)) +
geom_point( size=5, color="red", fill=alpha("orange", 0.3))
ggplot(imp,aes(reorder(name,impt),impt)) +
geom_segment( aes(x=reorder(name,impt), xend=reorder(name,impt), y=0, yend=impt)) +
geom_point( size=5, color="red", fill=alpha("orange", 0.3))+
coord_flip()
ggplot(imp,aes(reorder(name,impt),impt)) +
geom_segment( aes(x=reorder(name,impt), xend=reorder(name,impt), y=0, yend=impt)) +
geom_point(size=3, color="red")+
coord_flip()
ggplot(imp,aes(reorder(name,impt),impt)) +
geom_segment( aes(x=reorder(name,impt), xend=reorder(name,impt), y=0, yend=impt),size=1) +
geom_point(size=3, color="red")+
coord_flip()
ggplot(imp,aes(reorder(name,impt),impt)) +
geom_segment( aes(x=reorder(name,impt), xend=reorder(name,impt), y=0, yend=impt),size=1) +
geom_point(size=3, color="red")+
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)+
coord_flip()
ggplot(imp,aes(reorder(name,impt),impt)) +
geom_segment( aes(x=reorder(name,impt), xend=reorder(name,impt), y=0, yend=impt),size=1) +
geom_point(size=3, color="red")+
coord_flip()+
labs(x="重要性",y="变量名") +
theme_bw()
ggplot(imp,aes(reorder(name,impt),impt)) +
geom_segment( aes(x=reorder(name,impt), xend=reorder(name,impt), y=0, yend=impt),size=1) +
geom_point(size=3, color="red")+
coord_flip()+
labs(x="重要性",y="变量名") +
theme_bw()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
?labs
`%>%` <- magrittr::`%>%`
library(caret)
library(readr)
library(tidyr)
library(dplyr)
library(kknn)
library(ggplot2)
library(pROC)
rfControl <-trainControl( #10折交叉验证
method ="cv",
number =10
)
library(mlbench) #加载数据集
data(BostonHousing)
head(BostonHousing)
nrow(BostonHousing) #样本量
rpartFit <- train(medv ~ .,
data = BostonHousing,
method = "rpart",
trControl = rfControl)
rpartFit
repeatedcv <-trainControl(method ="repeatedcv", number =10,repeats =10, savePredictions
=T)
rpartFit <- train(medv ~ .,
data = BostonHousing,
method = "rpart",
trControl = repeatedcv)
rpartFit
importance <- varImp(rpartFit, scale = F)
imp <- as.data.frame(importance[["importance"]])
imp <- imp %>%
mutate(name=rownames(imp)) %>%
filter(Overall>0) %>%
rename('impt'='Overall') #%>%
#mutate(varname = fct_reorder(varname,impt))
ggplot(imp,aes(reorder(name,impt),impt)) +
geom_segment( aes(x=reorder(name,impt), xend=reorder(name,impt), y=0, yend=impt),size=1) +
geom_point(size=3, color="red")+
coord_flip()+
labs(x="重要性",y="变量名") +
theme_bw()
rfControl <-trainControl(
method ="LOOCV"
) #留一交叉验证
rpartFit <- train(medv ~ .,
data = BostonHousing,
method = "rpart",
trControl = rfControl)
rpartFit
varImp(rpartFit, scale = F)# 变量的重要性
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
pokemon <- pokemon %>%
mutate(test_pred=predict(knn_fit,newdata=pokemon))
confusionMatrix(pokemon$test_pred,pokemon$Legendary)
rfControl <-trainControl(
method ="LOOCV"
) #留一交叉验证
rpartFit <- train(medv ~ .,
data = BostonHousing,
method = "rpart",
trControl = rfControl)
rpartFit
varImp(rpartFit, scale = F)# 变量的重要性
pokemon$test_pred <- as.ordered(pokemon$test_pred)
pokemon$Legendary <- as.ordered(pokemon$Legendary)
roc(pokemon$test_pred,pokemon$Legendary,plot=T, print.auc=T, auc.polygon=T, max.auc.polygon=T,auc.polygon.col="skyblue", print.thres=T,xlab ='伪正类率',ylab='真正类率',smooth=T)
install.packages("ROSE")
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
nrow(pokemon)
library(ROSE)
balanced <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=414,seed = 1)
nrow(balanced)
library(ROSE)
balanced <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=414,seed = 1)$data
nrow(balanced)
table(balanced$Legendary)
View(balanced)
table(pokemon$Legendary)
374*2
View(pokemon)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
library(ROSE)
balanced <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=748,seed = 1)$data
#sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
#trainpok <- pokemon[sampled,]
#testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = balanced, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
pokemon <- pokemon %>%
mutate(test_pred=predict(knn_fit,newdata=balanced))
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
library(ROSE)
balanced <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=748,seed = 1)$data
#sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
#trainpok <- pokemon[sampled,]
#testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = balanced, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
balanced <- balanced %>%
mutate(test_pred=predict(knn_fit,newdata=balanced))
confusionMatrix(balanced$test_pred,balanced$Legendary)
balanced$test_pred <- as.ordered(balanced$test_pred)
balanced$Legendary <- as.ordered(balanced$Legendary)
roc(balanced$test_pred,balanced$Legendary,plot=T, print.auc=T, auc.polygon=T, max.auc.polygon=T,auc.polygon.col="skyblue", print.thres=T,xlab ='伪正类率',ylab='真正类率')
#ggroc()
roc(balanced$test_pred,balanced$Legendary,plot=T, print.auc=T, auc.polygon=T, max.auc.polygon=T,auc.polygon.col="skyblue", print.thres=T,xlab ='伪正类率',ylab='真正类率',smooth = T)
confusionMatrix(balanced$test_pred,balanced$Legendary)
ccm <- confusionMatrix(balanced$test_pred,balanced$Legendary)
View(ccm)
ccm[["table"]]
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
library(ROSE)
balanced <- ovun.sample(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "both", p=0.5,N=748,seed = 1)$data
#sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
#trainpok <- pokemon[sampled,]
#testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = balanced, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
balanced <- balanced %>%
mutate(test_pred=predict(knn_fit,newdata=balanced))
conMatrix <- confusionMatrix(balanced$test_pred,balanced$Legendary)
matrix <- conMatrix[["table"]]
conMatrix
conMatrix[["table"]]
?roc
table(balanced$test_pred,balanced$Legendary)
roc(matrix,plot=T, print.auc=T, auc.polygon=T, max.auc.polygon=T,auc.polygon.col="skyblue", print.thres=T,xlab ='伪正类率',ylab='真正类率')
balanced$test_pred
roc(matrix$test_pred,balanced$Legendary,plot=T, print.auc=T, auc.polygon=T, max.auc.polygon=T,auc.polygon.col="skyblue", print.thres=T,xlab ='伪正类率',ylab='真正类率')
roc(balanced$test_pred,balanced$Legendary,plot=T, print.auc=T, auc.polygon=T, max.auc.polygon=T,auc.polygon.col="skyblue", print.thres=T,xlab ='伪正类率',ylab='真正类率')
balanced$test_pred <- as.ordered(balanced$test_pred)
balanced$Legendary <- as.ordered(balanced$Legendary)
roc(balanced$test_pred,balanced$Legendary,plot=T, print.auc=T, auc.polygon=T, max.auc.polygon=T,auc.polygon.col="skyblue", print.thres=T,xlab ='伪正类率',ylab='真正类率')
#ggroc()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()

library(nlme)
library(ggplot2)
library(plyr)
library(dplyr)
library(readxl)
library(readr)
library(reshape2)
library(haven)
library(rgdal)
n <- 200
beta0 <- 1.0
beta1 <- 6.0
ar.val <- .4
sigma <- 1.5
tau0  <- 2.5
tau1  <- 2.0
tau01 <- 0.3
m <- 10
p <- round(runif(n,4,m))
obs <- unlist(sapply(p, function(x) c(1, sort(sample(2:m, x-1, replace=FALSE)))))
dat <- data.frame(id=rep(1:n, times=p), obs=obs)
mu  <- c(0,0)
S   <- matrix(c(1, tau01, tau01, 1), nrow=2)
tau <- c(tau0, tau1)
S   <- diag(tau) %*% S %*% diag(tau)
U   <- mvrnorm(n, mu=mu, Sigma=S)
dat$eij <- unlist(sapply(p, function(x) arima.sim(model=list(ar=ar.val), n=x) * sqrt(1-ar.val^2) * sigma))
dat$yij <- (beta0 + rep(U[,1], times=p)) + (beta1 + rep(U[,2], times=p)) * log(dat$obs) + dat$eij
library(plyr)
dat = ddply(dat, .(id), function(x){
x$alpha = ifelse(runif(n = 1) > 0.9, 1, 0.1)
x$grouper = factor(rbinom(n=1, size =3 ,prob=0.5), levels=0:3)
x
})
dat <- subset(dat,grouper==0)
ggplot(dat, aes(obs,yij,color = factor(id))) +
geom_line(size=1.5) + guides(color=F) +
labs(x='调查时间点',y='变量值') +
theme_classic() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
library(MASS)
library(nlme)
library(ggplot2)
library(plyr)
library(dplyr)
library(readxl)
library(readr)
library(reshape2)
library(haven)
library(rgdal)
n <- 200
beta0 <- 1.0
beta1 <- 6.0
ar.val <- .4
sigma <- 1.5
tau0  <- 2.5
tau1  <- 2.0
tau01 <- 0.3
m <- 10
p <- round(runif(n,4,m))
obs <- unlist(sapply(p, function(x) c(1, sort(sample(2:m, x-1, replace=FALSE)))))
dat <- data.frame(id=rep(1:n, times=p), obs=obs)
mu  <- c(0,0)
S   <- matrix(c(1, tau01, tau01, 1), nrow=2)
tau <- c(tau0, tau1)
S   <- diag(tau) %*% S %*% diag(tau)
U   <- mvrnorm(n, mu=mu, Sigma=S)
dat$eij <- unlist(sapply(p, function(x) arima.sim(model=list(ar=ar.val), n=x) * sqrt(1-ar.val^2) * sigma))
dat$yij <- (beta0 + rep(U[,1], times=p)) + (beta1 + rep(U[,2], times=p)) * log(dat$obs) + dat$eij
library(plyr)
dat = ddply(dat, .(id), function(x){
x$alpha = ifelse(runif(n = 1) > 0.9, 1, 0.1)
x$grouper = factor(rbinom(n=1, size =3 ,prob=0.5), levels=0:3)
x
})
dat <- subset(dat,grouper==0)
ggplot(dat, aes(obs,yij,color = factor(id))) +
geom_line(size=1.5) + guides(color=F) +
labs(x='调查时间点',y='变量值') +
theme_light() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
library(MASS)
library(nlme)
library(ggplot2)
library(plyr)
library(dplyr)
library(readxl)
library(readr)
library(reshape2)
library(haven)
library(rgdal)
n <- 200
beta0 <- 1.0
beta1 <- 6.0
ar.val <- .4
sigma <- 1.5
tau0  <- 2.5
tau1  <- 2.0
tau01 <- 0.3
m <- 10
p <- round(runif(n,4,m))
obs <- unlist(sapply(p, function(x) c(1, sort(sample(2:m, x-1, replace=FALSE)))))
dat <- data.frame(id=rep(1:n, times=p), obs=obs)
mu  <- c(0,0)
S   <- matrix(c(1, tau01, tau01, 1), nrow=2)
tau <- c(tau0, tau1)
S   <- diag(tau) %*% S %*% diag(tau)
U   <- mvrnorm(n, mu=mu, Sigma=S)
dat$eij <- unlist(sapply(p, function(x) arima.sim(model=list(ar=ar.val), n=x) * sqrt(1-ar.val^2) * sigma))
dat$yij <- (beta0 + rep(U[,1], times=p)) + (beta1 + rep(U[,2], times=p)) * log(dat$obs) + dat$eij
library(plyr)
dat = ddply(dat, .(id), function(x){
x$alpha = ifelse(runif(n = 1) > 0.9, 1, 0.1)
x$grouper = factor(rbinom(n=1, size =3 ,prob=0.5), levels=0:3)
x
})
dat <- subset(dat,grouper==0)
ggplot(dat, aes(obs,yij,color = factor(id))) +
geom_line(size=1.5) + guides(color=F) +
labs(x='调查时间点',y='变量值') +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
library(MASS)
library(nlme)
library(ggplot2)
library(plyr)
library(dplyr)
library(readxl)
library(readr)
library(reshape2)
library(haven)
library(rgdal)
n <- 200
beta0 <- 1.0
beta1 <- 6.0
ar.val <- .4
sigma <- 1.5
tau0  <- 2.5
tau1  <- 2.0
tau01 <- 0.3
m <- 10
p <- round(runif(n,4,m))
obs <- unlist(sapply(p, function(x) c(1, sort(sample(2:m, x-1, replace=F)))))
dat <- data.frame(id=rep(1:n, times=p), obs=obs)
mu  <- c(0,0)
S   <- matrix(c(1, tau01, tau01, 1), nrow=2)
tau <- c(tau0, tau1)
S   <- diag(tau) %*% S %*% diag(tau)
U   <- mvrnorm(n, mu=mu, Sigma=S)
dat$eij <- unlist(sapply(p, function(x) arima.sim(model=list(ar=ar.val), n=x) * sqrt(1-ar.val^2) * sigma))
dat$yij <- (beta0 + rep(U[,1], times=p)) + (beta1 + rep(U[,2], times=p)) * log(dat$obs) + dat$eij
dat = ddply(dat, .(id), function(x){
x$alpha = ifelse(runif(n = 1) > 0.9, 1, 0.1)
x$grouper = factor(rbinom(n=1, size =3 ,prob=0.5), levels=0:3)
x
})
dat <- subset(dat,grouper==0)
ggplot(dat, aes(obs,yij,color = factor(id))) +
geom_line(size=1.5) + guides(color=F) +
labs(x='调查时间点',y='变量值') +
theme_classic() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size = 15),
axis.ticks = element_blank())
china_map_data <- read_dta("E:/R_codes/maps/nomissing/chnprovcd.dta")
mapdata <- read_excel("E:/R_codes/ggplot2map/geodata0131.xlsx")
mapdata <- as.data.frame(mapdata)
mapdata <- select(mapdata,-(NAME))
china_data <- join(china_map_data,mapdata,type="full")
china_data <- select(china_data,long,lat,group,'2011土地租出','2011土地租入','2013土地租出','2013土地租入','2015土地租出','2015土地租入')
long <- melt(china_data, id=c("long", "lat","group"))
ggplot(long,aes(long,lat,group=group,fill=value)) +
geom_polygon(colour='brown',size=0.2) +
scale_fill_gradientn(colours=c('yellow','red'),na.value = 'white',breaks =c(10,20,30,40),limits=c(0,43),guide='legend') +
coord_map('polyconic') +
facet_wrap(~variable,nrow = 2) +
labs(x='经度',y='纬度',fill = '土地流转发生率') +
theme(axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30))+
theme_bw()
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 = (x^mylambda-1)/mylambda
hist(x2)
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 = (x^mylambda-1)/mylambda
ggplot(x2,aes(x2)) +
geom_histogram()
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 = (x^mylambda-1)/mylambda
ggplot(x2,aes()) +
geom_histogram()
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 = as.data.frame((x^mylambda-1)/mylambda)
View(x2)
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
View(x2)
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram()
hist(x2)
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(fill=white)
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(fill='white')
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(color='white')
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(color='gray',fill='white')
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(color='black',fill='white')
?geom_histogram
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(stat='density',color='black',
fill='white')
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1, lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(color='black',
fill='white')
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1,lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(color='black',
fill='white')
library(MASS)
x = rf(500,30,30)
hist(x,breaks = 12)
result = boxcox(x~1,lambda = seq(-0.5,0,5))
mylambda = result$x[which.max(result$y)]
mylambda
x2 <- (x^mylambda-1)/mylambda
x2 = as.data.frame(x2)
ggplot(x2,aes(x2)) +
geom_histogram(color='black',
fill='white')
lh
deaths
par(mfrow = c(2, 2))
ts.plot(lh)
ts.plot(deaths, mdeaths, fdeaths,
lty = c(1, 3, 4), xlab = "year", ylab = "deaths")
par(mfrow = c(2, 2))
spectrum(lh)
spectrum(deaths)
ts.sim <- arima.sim(list(order = c(1,1,0), ar = 0.7), n = 200)
ts.sim
summary(ts.sim)
acf(lh, type = "partial")
acf(lh, type = "partial")
acf(lh, type = "partial")
??deaths
library(datasets)
?deaths
??deaths
nottem
nott <- window(nottem, end = c(1936, 12))
ts.plot(nott)
nott.stl <- stl(nott, "period")
ts.plot(nott.stl$rem-49, nott.stl$sea,
ylim = c(-15, 15), lty = c(1, 3))
nott.stl <- stl(nott, 5)
ts.plot(nott.stl$rem-49, nott.stl$sea,
ylim = c(-15, 15), lty = c(1, 3))
boxplot(split(nott, cycle(nott)), names = month.abb)
beav2.gls <- gls(temp ~ activ, data = beav2,
corr = corAR1(0.8), method = "ML")
library(nlme)
beav2.gls <- gls(temp ~ activ, data = beav2,
+                  corr = corAR1(0.8), method = "ML")
beav2.gls <- gls(temp ~ activ, data = beav2, corr = corAR1(0.8), method = "ML")
module(garch)
library(garch)
summary(garch(SP500 ~ 1, ~garch(1, 1)))
?MASS
library(MASS)
?MASS
??MASS
deaths
tspar(deaths)
start(deaths)
?tspar
??tspar
ts.plot(deaths, mdeaths, fdeaths,
lty = c(1, 3, 4), xlab = "year", ylab = "deaths")
ts.plot(deaths, mdeaths, fdeaths,
lty = c(1, 3, 4), xlab = "year", ylab = "deaths")
aggregate(deaths, 1, mean)
deaths
?deaths
require(stats); require(graphics) # for time
plot(ldeaths)
plot(mdeaths, fdeaths)
## Better labels:
yr <- floor(tt <- time(mdeaths))
plot(mdeaths, fdeaths,
xy.labels = paste(month.abb[12*(tt - yr)], yr-1900, sep = "'"))
plot(ldeaths)
plot(mdeaths, fdeaths)
acf(lh)
data(AirPassengers)
AirPassengers
data(freeny)
partial <- lm(y~lag.quarterly.revenue+price.index+
income.level+market.potential,freeny)
modela <- lm(y~price.index+market.potential,freeny)
modelb <- lm(y~price.index*market.potential,freeny)
stargazer(modela,modelb,partial,
title='回归结果',
dep.var.caption='',
dep.var.labels='Quarterly Revenue',
header=F,keep.stat=c('n','rsq'),
no.space=T,type='html',align=T)
data(freeny)
partial <- lm(y~lag.quarterly.revenue+price.index+
income.level+market.potential,freeny)
modela <- lm(y~price.index+market.potential,freeny)
modelb <- lm(y~price.index*market.potential,freeny)
library(stargazer)
stargazer(modela,modelb,partial,
title='回归结果',
dep.var.caption='',
dep.var.labels='Quarterly Revenue',
header=F,keep.stat=c('n','rsq'),
no.space=T,type='html',align=T)
---
title: '基于XGBoost算法的学习成绩预测模型'
subtitle: '兼论定量研究中的可重复性危机'
author: '[宋骁](https://xsong.ltd/)'
institute: "华东师范大学 社会发展学院"
date: '`r Sys.Date()`'
output:
xaringan::moon_reader:
css: GreenLight.css
lib_dir: libs
nature:
highlightStyle: github
highlightLines: true
countIncrementalSlides: false
bibliography: bibfile.bib
---
unlink('F:/Mysite/Mysite/static/slides/toefl/task46_cache', recursive = TRUE)
install.packages('export')
china_map_data <- read_dta("E:/R_codes/maps/nomissing/chnprovcd.dta")
mapdata <- read_excel("E:/R_codes/ggplot2map/geodata0131.xlsx")
mapdata <- as.data.frame(mapdata)
mapdata <- select(mapdata,-(NAME))
china_data <- join(china_map_data,mapdata,type="full")
china_data <- select(china_data,long,lat,group,'2011土地租出','2011土地租入','2013土地租出','2013土地租入','2015土地租出','2015土地租入')
long <- melt(china_data, id=c("long", "lat","group"))
a <- ggplot(long,aes(long,lat,group=group,fill=value)) +
geom_polygon(colour='brown',size=0.2) +
scale_fill_gradientn(colours=c('yellow','red'),na.value = 'white',breaks =c(10,20,30,40),limits=c(0,43),guide='legend') +
coord_map('polyconic') +
facet_wrap(~variable,nrow = 3) +
labs(x='经度',y='纬度',fill = '土地流转发生率') +
theme(axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30))+
theme_bw()
library(MASS)
library(nlme)
library(ggplot2)
library(plyr)
library(dplyr)
library(readxl)
library(readr)
library(reshape2)
library(haven)
library(rgdal)
china_map_data <- read_dta("E:/R_codes/maps/nomissing/chnprovcd.dta")
mapdata <- read_excel("E:/R_codes/ggplot2map/geodata0131.xlsx")
mapdata <- as.data.frame(mapdata)
mapdata <- select(mapdata,-(NAME))
china_data <- join(china_map_data,mapdata,type="full")
china_data <- select(china_data,long,lat,group,'2011土地租出','2011土地租入','2013土地租出','2013土地租入','2015土地租出','2015土地租入')
long <- melt(china_data, id=c("long", "lat","group"))
a <- ggplot(long,aes(long,lat,group=group,fill=value)) +
geom_polygon(colour='brown',size=0.2) +
scale_fill_gradientn(colours=c('yellow','red'),na.value = 'white',breaks =c(10,20,30,40),limits=c(0,43),guide='legend') +
coord_map('polyconic') +
facet_wrap(~variable,nrow = 3) +
labs(x='经度',y='纬度',fill = '土地流转发生率') +
theme(axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30))+
theme_bw()
a
library(export)
graph2ppt(a,file='C:/Users/xsong/Desktop/table/test.pptx')
graph2ppt(a,file='C:/Users/xsong/Desktop/table/test2.pptx',paper=A4)
graph2ppt(a,file='C:/Users/xsong/Desktop/table/test2.pptx', width=4, height=6)
graph2ppt(a,file='C:/Users/xsong/Desktop/table/test3.pptx', width=12, height=18)
install.packages(c("fMultivar", "jiebaR", "psych", "rdd", "rpart.plot", "wordcloud2", "xgboost"))
install
install.packages('rattle')
install.packages("titanic")
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::stop_server()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::stop_server()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::stop_server()

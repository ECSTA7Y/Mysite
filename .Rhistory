}
z <- matrix(var.grid$ll, nrow = length(x), ncol = length(y))
colnames(z) <- y
rownames(z) <- x
library(lattice)
contourplot(ll ~ mu*sigma, data = var.grid, cuts = 20)
trellis.focus("panel", 1, 1, highlight=FALSE)
lpoints(x=var.grid[which.min(var.grid$ll), 1], y=var.grid[which.min(var.grid$ll), 2], pch=16, col = "steelblue", cex=2)
trellis.unfocus()
x <- rexp(50)
fite <- fitdist(x, "exp")
llplot(fite)
llplot(fite, col = "red", fit.show = TRUE)
llplot(fite, col = "red", fit.show = TRUE, loglik = FALSE)
# (2) a distribution with two parameters
#
data(groundbeef)
serving <- groundbeef$serving
fitg <- fitdist(serving, "gamma")
llplot(fitg)
## Not run:
llplot(fitg, expansion = 2)
llplot(fitg, pal.col = heat.colors(100), fit.show = TRUE)
llplot(fitg, back.col = FALSE, nlev = 25, fit.show = TRUE)
## End(Not run)
# (3) a distribution with two parameters with one fixed
#
fitg2 <- fitdist(serving, "gamma", fix.arg = list(rate = 0.5))
llplot(fitg2, fit.show = TRUE)
# (4) a distribution with three parameters
#
## Not run:
data(endosulfan)
ATV <-endosulfan$ATV
library("actuar")
fBurr <- fitdist(ATV, "burr", start = list(shape1 = 0.3, shape2 = 1, rate = 1))
llplot(fBurr)
llplot(fBurr, back.col = FALSE, fit.show = TRUE, fit.pch = 16)
llplot(fBurr, nlev = 0, pal.col = rainbow(100), lseq = 100)
## End(Not run)
# (5) a distribution with two parameters fitted on censored data
#
data(salinity)
fsal <- fitdistcens(salinity, "lnorm")
llplot(fsal, fit.show = TRUE)
llplot(fsal, fit.show = TRUE, loglik = FALSE)
install.packages('actuar')
x <- rexp(50)
fite <- fitdist(x, "exp")
llplot(fite)
llplot(fite, col = "red", fit.show = TRUE)
llplot(fite, col = "red", fit.show = TRUE, loglik = FALSE)
# (2) a distribution with two parameters
#
data(groundbeef)
serving <- groundbeef$serving
fitg <- fitdist(serving, "gamma")
llplot(fitg)
## Not run:
llplot(fitg, expansion = 2)
llplot(fitg, pal.col = heat.colors(100), fit.show = TRUE)
llplot(fitg, back.col = FALSE, nlev = 25, fit.show = TRUE)
## End(Not run)
# (3) a distribution with two parameters with one fixed
#
fitg2 <- fitdist(serving, "gamma", fix.arg = list(rate = 0.5))
llplot(fitg2, fit.show = TRUE)
# (4) a distribution with three parameters
#
## Not run:
data(endosulfan)
ATV <-endosulfan$ATV
library("actuar")
fBurr <- fitdist(ATV, "burr", start = list(shape1 = 0.3, shape2 = 1, rate = 1))
llplot(fBurr)
llplot(fBurr, back.col = FALSE, fit.show = TRUE, fit.pch = 16)
llplot(fBurr, nlev = 0, pal.col = rainbow(100), lseq = 100)
## End(Not run)
# (5) a distribution with two parameters fitted on censored data
#
data(salinity)
fsal <- fitdistcens(salinity, "lnorm")
llplot(fsal, fit.show = TRUE)
llplot(fsal, fit.show = TRUE, loglik = FALSE)
??fitdist
negL<- function(mu,tau,data){
n11=data$ev.trt
n12=data$n.trt-data$ev.trt
n21=data$ev.ctrl
n22=data$n.ctrl-data$ev.ctrl
odds=(n11*n22)/(n12*n21)
logodds=log(odds)
varodds=(1/n11)+(1/n12)+(1/n21)+(1/n22)
x=logodds
sigma=varodds
L=-(1/2)*sum(log((2*pi)*(sigma+tau)))-(1/2)*sum((((x-mu)^2))/(sigma+tau))
return(-L)
}
f <- Vectorize(negL,vectorize.args=c("mu","tau"))
library(rgl)
mu  <- seq(0,6,0.1)
tau <- seq(0,3,0.1)
z <- outer(mu,tau,f,data=data)
zlim    <- range(z[!is.na(z)])
palette <- rev(rainbow(20))
colors  <- palette[19*(z-zlim[1])/diff(zlim) + 1]
persp3d(mu,tau,z,col=colors)
n <- 100
set.seed(1234)
x <- rexp(n)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4,
loglik = FALSE)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4,
main = "log-likelihood for exponential distribution", col = "red")
abline(v = 1, lty = 2)
# (2) loglikelihood surface
#
x <- rnorm(n, 0, 1)
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2), back.col = FALSE,
main="log-likelihood for normal distribution")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2),
main="log-likelihood for normal distribution",
nlev = 20, pal.col = heat.colors(100),)
points(0, 1, pch="+", col="red")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2),
main="log-likelihood for normal distribution",
nlev = 0, back.col = TRUE, pal.col = rainbow(100, s = 0.5, end = 0.8))
points(0, 1, pch="+", col="black")
install.packages('fitdistrplus')
n <- 100
set.seed(1234)
x <- rexp(n)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4,
loglik = FALSE)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4,
main = "log-likelihood for exponential distribution", col = "red")
abline(v = 1, lty = 2)
# (2) loglikelihood surface
#
x <- rnorm(n, 0, 1)
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2), back.col = FALSE,
main="log-likelihood for normal distribution")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2),
main="log-likelihood for normal distribution",
nlev = 20, pal.col = heat.colors(100),)
points(0, 1, pch="+", col="red")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2),
main="log-likelihood for normal distribution",
nlev = 0, back.col = TRUE, pal.col = rainbow(100, s = 0.5, end = 0.8))
points(0, 1, pch="+", col="black")
library(llsurface)
library(fitdistrplus)
n <- 100
set.seed(1234)
x <- rexp(n)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4,
loglik = FALSE)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4,
main = "log-likelihood for exponential distribution", col = "red")
abline(v = 1, lty = 2)
# (2) loglikelihood surface
#
x <- rnorm(n, 0, 1)
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2), back.col = FALSE,
main="log-likelihood for normal distribution")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2),
main="log-likelihood for normal distribution",
nlev = 20, pal.col = heat.colors(100),)
points(0, 1, pch="+", col="red")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2),
main="log-likelihood for normal distribution",
nlev = 0, back.col = TRUE, pal.col = rainbow(100, s = 0.5, end = 0.8))
points(0, 1, pch="+", col="black")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2), back.col = FALSE,
main="log-likelihood for normal distribution")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2),
main="log-likelihood for normal distribution",
nlev = 20, pal.col = heat.colors(100),)
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2),
main="log-likelihood for normal distribution",
nlev = 0, back.col = TRUE, pal.col = rainbow(100, s = 0.5, end = 0.8))
points(0, 1, pch="+", col="black")
llsurface(data =x, distr="norm", plot.arg=c("mean", "sd"),
min.arg=c(-1, 0.5), max.arg=c(1, 3/2), back.col = FALSE,
main="log-likelihood for normal distribution")
# Use a contour plot
#Possible values to test
x <- posMu <- seq(97, 104, length.out=200)
y <- posSig <- seq(20, 70, length.out=200)
var.grid <- expand.grid(mu = posMu, sigma = posSig)
var.grid$ll <- NA
for ( i in 1:dim(var.grid)[1] ) {
var.grid$ll[i] <- norm.fit(x = IQs, mu = var.grid[i, "mu"], sigma2 = var.grid[i, "sigma"])
}
z <- matrix(var.grid$ll, nrow = length(x), ncol = length(y))
colnames(z) <- y
rownames(z) <- x
library(lattice)
contourplot(ll ~ mu*sigma, data = var.grid, cuts = 20)
trellis.focus("panel", 1, 1, highlight=FALSE)
lpoints(x=var.grid[which.min(var.grid$ll), 1], y=var.grid[which.min(var.grid$ll), 2], pch=16, col = "steelblue", cex=2)
trellis.unfocus()
norm.fit <- function(x, mu, sigma2) {
-sum(dnorm(x, mu, sqrt(sigma2), log=TRUE))
}
#Parameters
Mu <- 100
Sigma2 <- 50
#Sample
N <- 100
set.seed(1)
IQs <- rnorm(N, mean=Mu, sd=sqrt(Sigma2))
#Possible values to test
x <- posMu <- seq(80, 120, length.out=200)
y <- posSig <- seq(20, 60, length.out=200)
var.grid <- expand.grid(mu = posMu, sigma = posSig)
var.grid$ll <- NA
for ( i in 1:dim(var.grid)[1] ) {
var.grid$ll[i] <- norm.fit(x = IQs, mu = var.grid[i, "mu"], sigma2 = var.grid[i, "sigma"])
}
# MLE from grid
var.grid[which.min(var.grid$ll), ]
z <- matrix(var.grid$ll, nrow = 200, ncol = 200)
colnames(z) <- y
rownames(z) <- x
#Graph the LLs
library(rgl)
open3d()
plot3d(mean(x),mean(y),mean(z), xlab="Mu", ylab="Sigma2", zlab="log L", xlim=c(min(x),max(x)), ylim=c(min(y),max(y)), zlim=c(min(z),max(z)))
surface3d(x, y, z, color=rainbow(length(x)))
n <- 100
set.seed(1234)
x <- rexp(n)
llcurve(data = x, distr = "exp", plot.arg =  "rate", min.arg = 0, max.arg = 4)
library(data.table)
ll <- function(b, dt, var) {
dt[, sum(dnorm(x = y, mean = b*x, sd = sqrt(var), log = TRUE))]
}
test <- data.table(x=c(1,1,4), y =c(2.0, 1.8, 6.3))
ll(b = 1.8, test, var = 1)
ll(b = 0.5, test, var = 1)
install.packages('simstudy')
library(simstudy)
b <- c(seq(0, 3, length.out = 500))
truevar = 1
defX <- defData(varname = "x", formula = 0,
variance = 9, dist = "normal")
defA <- defDataAdd(varname = "y", formula = "1.5*x",
variance = truevar, dist = "normal")
set.seed(21)
dt <- genData(200, defX)
dt <- addColumns(defA, dt)
dt
loglik <- sapply(b, ll, dt = dt, var = truevar)
bt <- data.table(b, loglike = loglik)
bt
maxlik <- dt[, max(loglik)]
lmfit <- lm(y ~ x - 1, data =dt) # OLS estimate
(maxest <- bt[loglik == maxlik, b]) # value of beta that maxmizes likelihood
library(ggplot2)
slopetxt <- paste0("OLS estimate: ", round(coef(lmfit), 2))
p1 <- ggplot(data = dt, aes(x = x, y= y)) +
geom_point(color = "grey50") +
theme(panel.grid = element_blank()) +
geom_smooth(method = "lm", se = FALSE,
size = 1, color = "#1740a6") +
annotate(geom = "text", label = slopetxt,
x = -5, y = 7.5,
family = "sans")
p2 <- ggplot(data = bt) +
scale_y_continuous(name = "Log likelihood") +
scale_x_continuous(limits = c(0, 3),
breaks = seq(0, 3, 0.5),
name = expression(beta)) +
theme(panel.grid.minor = element_blank())  +
geom_line(aes(x = b, y = loglike),
color = "#a67d17", size = 1) +
geom_point(x = maxest, y = maxlik, color = "black", size = 3)
p2
require(tidyverse)
data.frame(c = co2, time = time(co2)) %>%
mutate(year = floor(time)) %>%
group_by(year) %>%
summarise(c = mean(c)) %>%
ggplot() +
geom_point(aes(year, c))
?spline
require(graphics)
op <- par(mfrow = c(2,1), mgp = c(2,.8,0), mar = 0.1+c(3,3,3,1))
n <- 9
x <- 1:n
y <- rnorm(n)
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201), col = 2)
lines(spline(x, y))
n <- 20
set.seed(11)
x. <- sort(runif(n)) ; y. <- cumsum(abs(rnorm(n)))
plot(x., y.)
require(ISLR)
data(wage)
data(wage,package = 'ISLR')
library(ISLR)
install.packages('ISLR')
library(ISLR)
data(wage,package = 'ISLR')
fit<-lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fit<-lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
summary(fit)
?bs
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fit<-lm(wage ~ bs(age,degree=1,knots = c(25,40,60)),Wage)
summary(fit)
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fita <- lm(wage ~ bs(age,degree=1,knots = c(25,40,60)),Wage)
fitb <- lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
summary(fita)
summary(fitb)
grid <- wage %>%
data_grid(price.index) %>%
gather_predictions(fita,fitb)
library(dplyr)
library(tidyr)
library(ggplot2)
library(modelr)
library(haven)
library(cowplot)
library(stargazer)
`%>%` <- magrittr::`%>%`
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fita <- lm(wage ~ bs(age,degree=1,knots = c(25,40,60)),Wage)
fitb <- lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
summary(fita)
summary(fitb)
grid <- wage %>%
data_grid(price.index) %>%
gather_predictions(fita,fitb)
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fita <- lm(wage ~ bs(age,degree=1,knots = c(25,40,60)),Wage)
fitb <- lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
summary(fita)
summary(fitb)
grid <- ISLR %>%
data_grid(price.index) %>%
gather_predictions(fita,fitb)
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fita <- lm(wage ~ bs(age,degree=1,knots = c(25,40,60)),Wage)
fitb <- lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
summary(fita)
summary(fitb)
grid <- wage %>%
data_grid(price.index) %>%
gather_predictions(fita,fitb)
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fita <- lm(wage ~ bs(age,degree=1,knots = c(25,40,60)),Wage)
fitb <- lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
summary(fita)
summary(fitb)
grid <- Wage %>%
data_grid(price.index) %>%
gather_predictions(fita,fitb)
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fita <- lm(wage ~ bs(age,degree=1,knots = c(25,40,60)),Wage)
fitb <- lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
summary(fita)
summary(fitb)
grid <- Wage %>%
data_grid(age) %>%
gather_predictions(fita,fitb)
library(ISLR)
library(splines)
data(wage,package = 'ISLR')
fita <- lm(wage ~ bs(age,degree=1,knots = c(25,40,60)),Wage)
fitb <- lm(wage ~ bs(age,knots = c(25,40,60)),Wage)
summary(fita)
summary(fitb)
grid <- Wage %>%
data_grid(age) %>%
gather_predictions(fita,fitb)
ggplot(wage,aes(age,wage))+
geom_jitter(size=1,width=2,
height=10,alpha=1/7)+
geom_line(data=grid,aes(age,pred),size=1)+
facet_wrap(~model)+
xlim(0,25)+ ylim(0,40)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_jitter(size=1,width=2,
height=10,alpha=1/7)+
geom_line(data=grid,aes(age,pred),size=1)+
facet_wrap(~model)+
xlim(0,25)+ ylim(0,40)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_jitter(size=1,width=2,
height=10,alpha=1/7)+
geom_line(data=grid,aes(age,pred),size=1)+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point()+
geom_line(data=grid,aes(age,pred),size=1)+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(alpha=1/7)+
geom_line(data=grid,aes(age,pred),size=1)+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(alpha=1/7)+
geom_line(data=grid,aes(age,pred),size=1,color='green')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(alpha=1/7)+
geom_line(data=grid,aes(age,pred),color='green')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(alpha=1/7)+
geom_line(data=grid,aes(age,pred),size=2,color='green')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(alpha=1/7)+
geom_line(data=grid,aes(age,pred),
size=1,color='darkgreen')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(size=1,alpha=1/7)+
geom_line(data=grid,aes(age,pred),
size=1,color='green')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(size=1,alpha=1/7)+
geom_line(data=grid,aes(age,pred),
size=1,color='purple')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(color=white,size=1,alpha=1/7)+
geom_line(data=grid,aes(age,pred),
size=1,color='purple')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(color='white',size=1,alpha=1/7)+
geom_line(data=grid,aes(age,pred),
size=1,color='purple')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(fill='white',
size=1,alpha=1/7)+
geom_line(data=grid,aes(age,pred),
size=1,color='purple')+
facet_wrap(~model)+
theme_bw()
ggplot(Wage,aes(age,wage))+
geom_point(fill='red',
size=1,alpha=1/7)+
geom_line(data=grid,aes(age,pred),
size=1,color='purple')+
facet_wrap(~model)+
theme_bw()
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
blogdown:::stop_server()
require(tidyverse)
data.frame(c = co2, time = time(co2)) %>%
mutate(year = floor(time)) %>%
group_by(year) %>%
summarise(c = mean(c)) %>%
ggplot() +
geom_point(aes(year, c))
?bs

data(agaricus.train, package='xgboost')
install.packages('xgboost')
require(xgboost)
data(agaricus, package='xgboost')
data(agaricus.train, package='xgboost')
View(agaricus.train)
View(agaricus.train)
agaricus.train[["data"]]
agaricus.train
library(readr)
library(caret)
library(kknn)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
pokemon <- na.omit(pokemon)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
library(caret)
library(readr)
library(dplyr)
library(magrittr)
library(kknn)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
library(caret)
library(readr)
library(dplyr)
library(magrittr)
library(kknn)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
library(dplyr)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
update.packages('dplyr')
library(dplyr)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
library(tidyr)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
library(dplyr)
library(tidyr)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
#na.omit(pokemon)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
View(pokemon)
test_pred <- predict(knn_fit, data = pokemon)
??confusionMatrix
test_pred <- predict(knn_fit,newdata = pokemon)
test_pred
confusionMatrix(test_pred,pokemon$Legendary)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
trctrl <- trainControl(method = "LOOCV")
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
test_pred <- predict(knn_fit,newdata = pokemon)
test_pred
confusionMatrix(test_pred,pokemon$Legendary)
hunxiao <- confusionMatrix(test_pred,pokemon$Legendary)
View(hunxiao)
hunxiao[["overall"]][["Accuracy"]]
hunxiao[["overall"]]
hunxiao[["table"]]
hunxiao
View(knn_fit)
knn_fit[["pred"]]
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
test_pred <- predict(knn_fit,newdata = pokemon)
test_pred
hunxiao <- confusionMatrix(test_pred,pokemon$Legendary)
View(knn_fit)
knn_fit[["results"]][["k"]]
knn_fit[["results"]]
kacc <- as.data.frame(knn_fit[["results"]])
View(kacc)
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line()
ggplot(kacc,aes(k,Accuracy)) +
geom_line()
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point()
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
test_pred <- predict(knn_fit,newdata = pokemon)
confusionMatrix(test_pred,pokemon$Legendary)
detach("package:caret", unload = TRUE)
library(caret)
?knn
?kknn
?knn
?kknn
kknn(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, trainpok, testpok,k = 5, distance = 2)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
kknn(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, trainpok, testpok,k = 5, distance = 2)
kknn(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, trainpok, testpok,k = 5, distance = 2,na.action = na.omit())
library(kknn)
kknn(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, trainpok, testpok,k = 5, distance = 2)
View(trainpok)
kknn(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, trainpok, testpok,k = 5, distance = 2,kernel = "triangular")
wwee <- kknn(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, trainpok, testpok, k=5, distance = 2,kernel = "triangular")
?knn
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
knn(trainpok, testpok, k=5)
library(class)
knn(trainpok, testpok, k=5)
knn(trainpok, testpok,Legendary, k=5)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
library(class)
knn(trainpok, testpok,Legendary, k=5)
library(class)
knn(trainpok, testpok,cl=Legendary, k=5)
knn(trainpok,testpok,Legendary,k=5)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
test_pred <- predict(knn_fit,newdata = testpok)
confusionMatrix(test_pred,trainpok$Legendary)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = trainpok, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
testpok <- testpok %>%
select(-Legendary)
test_pred <- predict(knn_fit,newdata=testpok)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
test_pred <- predict(knn_fit,newdata=pokemon)
confusionMatrix(test_pred,trainpok$Legendary)
confusionMatrix(test_pred,pokemon$Legendary)
library(class)
knn(trainpok,testpok,Legendary,k=5)
library(class)
knn(trainpok,testpok,cl,k=5)
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
knn(train, test, cl, k = 3, prob=TRUE)
attributes(.Last.value)
iris3$cl
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,k=5)
??kNN
library(class)
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,k=5)
install.packages('kNN')
library(class)
knn(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,k=5)
update.packages('class')
library(class)
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,k=5)
install.packages('DMwR')
library(DMwR)
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,k=5)
library(DMwR)
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,k=5)
?kNN
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,norm=F,k=5)
library(DMwR)
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,norm=F,k=5)
View(testpok)
library(DMwR)
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,pokemon,pokemon,norm=F,k=5)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
library(DMwR)
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,norm=F,k=5)
library(DMwR)
kNN(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation,trainpok,testpok,norm=F,k=5)
model1<- knn(trainpok, testpok, cl=Legendary, k=16)
model1<- knn(trainpok, testpok, cl=trainpok.Legendary, k=16)
model1<- knn(trainpok, testpok, cl=testpok.Legendary, k=16)
model1<- knn(trainpok, testpok, cl=testpok$Legendary, k=16)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
model1<- knn(trainpok, testpok,testpok$Legendary, k=16)
model1<- knn(trainpok, testpok,trainpok$Legendary, k=16)
model1<- knn(trainpok, testpok,trainpok$Legendary, k=5)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
model1<- knn(trainpok, testpok,trainpok$Legendary, k=5)
?v
?knn
model1<- knn(trainpok, testpok,trainpok$Legendary, k=5, use.all = F)
knn.cv(pokemon,Legendary, k=5, use.all = F)
knn.cv(pokemon,pokemon$Legendary, k=5, use.all = F)
knn.cv(pokemon,pokemon$Legendary, k=5)
?knn3
knn3.cv(pokemon,pokemon$Legendary, k=5)
numpokemon <- sapply(pokemon, is.numeric)
knn.cv(numpokemon,numpokemon$Legendary, k=5)
knn.cv(numpokemon,Legendary, k=5)
knn.cv(numpokemon,numpokemon$Legendary, k=5)
numpokemon <- lapply(pokemon, is.numeric)
View(numpokemon)
numpokemon <- apply(pokemon, is.numeric)
numpokemon <- lapply(pokemon,is.numeric)
pokemon[numpokemon] <- lapply(pokemon[numpokemon], scale)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
preProcess = c("center", "scale"), #centering and scaling the data
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
pokemon <- pokemon %>%
mutate(test_pred=predict(knn_fit,newdata=pokemon))
#test_pred <- predict(knn_fit,newdata=pokemon)
confusionMatrix(test_pred,pokemon$Legendary)
confusionMatrix(pokemon$test_pred,pokemon$Legendary)
pokemon <- read_csv("E:/R_codes/others/Pokemon.csv")
colnames(pokemon)[1] <- 'id' #修改变量名
colnames(pokemon)[3] <- 'Type1'
colnames(pokemon)[4] <- 'Type2'
pokemon$Legendary <- as.factor(pokemon$Legendary)
pokemon <- na.omit(pokemon)
pokemon <- pokemon %>%
drop_na(Type1,Type2,Total,HP,Defense,Attack,Speed,Generation) %>%
select(Legendary,Type1,Type2,Total,HP,Defense,Attack,Speed,Generation)
sampled <- sample(1:nrow(pokemon),nrow(pokemon)*0.7,replace=F)
trainpok <- pokemon[sampled,]
testpok <- pokemon[-sampled,]
trctrl <- trainControl(method = "repeatedcv", number =10,repeats =10, savePredictions
=T)
set.seed(3333)
knn_fit <- train(Legendary ~ Type1 + Type2 + Total+ HP + Defense+ Attack + Speed + Generation, data = pokemon, method = "knn",
trControl=trctrl,
tuneLength = 10)
knn_fit
kacc <- as.data.frame(knn_fit[["results"]])
kacc <- kacc[,1:2]
ggplot(kacc,aes(k,Accuracy)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks=seq(5,26,1))
pokemon <- pokemon %>%
mutate(test_pred=predict(knn_fit,newdata=pokemon))
#test_pred <- predict(knn_fit,newdata=pokemon)
confusionMatrix(pokemon$test_pred,pokemon$Legendary)
modelroc <- roc(pokemon$test_pred,pokemon$Legendary)
library(pROC)
modelroc <- roc(pokemon$test_pred,pokemon$Legendary)
library(pROC)
library(lattice)
require(stats)
modelroc <- roc(pokemon$test_pred,pokemon$Legendary)
?roc
library(pROC)
library(lattice)
require(stats)
modelroc <- roc(pokemon$test_pred,pokemon$Legendary,levels=c("TRUE", "FALSE"))
pokemon$test_pred <- as.numeric(pokemon$test_pred)
pokemon$Legendary <- as.numeric(pokemon$Legendary)
modelroc <- roc(pokemon$test_pred,pokemon$Legendary,levels=c("TRUE", "FALSE"))
pokemon$test_pred <- as.numeric(pokemon$test_pred)
pokemon$Legendary <- as.numeric(pokemon$Legendary)
modelroc <- roc(pokemon$test_pred,pokemon$Legendary)
plot(modelroc, print.auc=T, auc.polygon=T, max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,xlab ='伪正类率',ylab='真正类率')
roc(pokemon$test_pred,pokemon$Legendary,plot=T)
roc(pokemon$test_pred,pokemon$Legendary,plot=T, print.auc=T, auc.polygon=T, max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,xlab ='伪正类率',ylab='真正类率')
roc(pokemon$test_pred,pokemon$Legendary,plot=T, print.auc=T,auc.polygon.col="skyblue", print.thres=TRUE,xlab ='伪正类率',ylab='真正类率')
setwd('F:\\Mysite\\Mysite')
blogdown:::serve_site()
